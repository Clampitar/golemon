/* This file was generated by SableCC (http://www.sablecc.org/). */

package gdx.game.Scene.parser;

import gdx.game.Scene.lexer.*;
import gdx.game.Scene.node.*;
import gdx.game.Scene.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProg node1 = (PProg) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprog1Prog */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAprog2Prog */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AAprog3Prog */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list, false);
            }
            break;
            case 3: /* reduce AAprog4Prog */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list, false);
            }
            break;
            case 4: /* reduce AAprog5Prog */
            {
                ArrayList<Object> list = new4();
                push(goTo(0), list, false);
            }
            break;
            case 5: /* reduce AAprog6Prog */
            {
                ArrayList<Object> list = new5();
                push(goTo(0), list, false);
            }
            break;
            case 6: /* reduce AAprog7Prog */
            {
                ArrayList<Object> list = new6();
                push(goTo(0), list, false);
            }
            break;
            case 7: /* reduce AAprog8Prog */
            {
                ArrayList<Object> list = new7();
                push(goTo(0), list, false);
            }
            break;
            case 8: /* reduce AStructDecl */
            {
                ArrayList<Object> list = new8();
                push(goTo(1), list, false);
            }
            break;
            case 9: /* reduce AAfields1Fields */
            {
                ArrayList<Object> list = new9();
                push(goTo(2), list, false);
            }
            break;
            case 10: /* reduce AAfields2Fields */
            {
                ArrayList<Object> list = new10();
                push(goTo(2), list, false);
            }
            break;
            case 11: /* reduce AAdditionalField */
            {
                ArrayList<Object> list = new11();
                push(goTo(3), list, false);
            }
            break;
            case 12: /* reduce AField */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list, false);
            }
            break;
            case 13: /* reduce AIntType */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list, false);
            }
            break;
            case 14: /* reduce ABoolType */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list, false);
            }
            break;
            case 15: /* reduce AStringType */
            {
                ArrayList<Object> list = new15();
                push(goTo(5), list, false);
            }
            break;
            case 16: /* reduce AVoidType */
            {
                ArrayList<Object> list = new16();
                push(goTo(5), list, false);
            }
            break;
            case 17: /* reduce AAfundecl1FunDecl */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list, false);
            }
            break;
            case 18: /* reduce AAfundecl2FunDecl */
            {
                ArrayList<Object> list = new18();
                push(goTo(6), list, false);
            }
            break;
            case 19: /* reduce AAfunbody1FunBody */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list, false);
            }
            break;
            case 20: /* reduce AAfunbody2FunBody */
            {
                ArrayList<Object> list = new20();
                push(goTo(7), list, false);
            }
            break;
            case 21: /* reduce AAssignerInst */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list, false);
            }
            break;
            case 22: /* reduce AAifinst1Inst */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list, false);
            }
            break;
            case 23: /* reduce AAifinst2Inst */
            {
                ArrayList<Object> list = new23();
                push(goTo(8), list, false);
            }
            break;
            case 24: /* reduce AAblockinst1Inst */
            {
                ArrayList<Object> list = new24();
                push(goTo(8), list, false);
            }
            break;
            case 25: /* reduce AAblockinst2Inst */
            {
                ArrayList<Object> list = new25();
                push(goTo(8), list, false);
            }
            break;
            case 26: /* reduce AWhileInst */
            {
                ArrayList<Object> list = new26();
                push(goTo(8), list, false);
            }
            break;
            case 27: /* reduce AAforinst1Inst */
            {
                ArrayList<Object> list = new27();
                push(goTo(8), list, false);
            }
            break;
            case 28: /* reduce AAforinst2Inst */
            {
                ArrayList<Object> list = new28();
                push(goTo(8), list, false);
            }
            break;
            case 29: /* reduce AAforinst3Inst */
            {
                ArrayList<Object> list = new29();
                push(goTo(8), list, false);
            }
            break;
            case 30: /* reduce AAforinst4Inst */
            {
                ArrayList<Object> list = new30();
                push(goTo(8), list, false);
            }
            break;
            case 31: /* reduce AAforinst5Inst */
            {
                ArrayList<Object> list = new31();
                push(goTo(8), list, false);
            }
            break;
            case 32: /* reduce AAforinst6Inst */
            {
                ArrayList<Object> list = new32();
                push(goTo(8), list, false);
            }
            break;
            case 33: /* reduce AAforinst7Inst */
            {
                ArrayList<Object> list = new33();
                push(goTo(8), list, false);
            }
            break;
            case 34: /* reduce AAforinst8Inst */
            {
                ArrayList<Object> list = new34();
                push(goTo(8), list, false);
            }
            break;
            case 35: /* reduce AAreturninst1Inst */
            {
                ArrayList<Object> list = new35();
                push(goTo(8), list, false);
            }
            break;
            case 36: /* reduce AAreturninst2Inst */
            {
                ArrayList<Object> list = new36();
                push(goTo(8), list, false);
            }
            break;
            case 37: /* reduce AAfuncallinst1Inst */
            {
                ArrayList<Object> list = new37();
                push(goTo(8), list, false);
            }
            break;
            case 38: /* reduce AAfuncallinst2Inst */
            {
                ArrayList<Object> list = new38();
                push(goTo(8), list, false);
            }
            break;
            case 39: /* reduce APrintExpInst */
            {
                ArrayList<Object> list = new39();
                push(goTo(8), list, false);
            }
            break;
            case 40: /* reduce APrintlnInst */
            {
                ArrayList<Object> list = new40();
                push(goTo(8), list, false);
            }
            break;
            case 41: /* reduce AAframeadvanceinst1Inst */
            {
                ArrayList<Object> list = new41();
                push(goTo(8), list, false);
            }
            break;
            case 42: /* reduce AAframeadvanceinst2Inst */
            {
                ArrayList<Object> list = new42();
                push(goTo(8), list, false);
            }
            break;
            case 43: /* reduce AWalkInst */
            {
                ArrayList<Object> list = new43();
                push(goTo(8), list, false);
            }
            break;
            case 44: /* reduce AMoveCamInst */
            {
                ArrayList<Object> list = new44();
                push(goTo(8), list, false);
            }
            break;
            case 45: /* reduce ADeclAssigner */
            {
                ArrayList<Object> list = new45();
                push(goTo(9), list, false);
            }
            break;
            case 46: /* reduce AAssignAssigner */
            {
                ArrayList<Object> list = new46();
                push(goTo(9), list, false);
            }
            break;
            case 47: /* reduce AFieldAssignAssigner */
            {
                ArrayList<Object> list = new47();
                push(goTo(9), list, false);
            }
            break;
            case 48: /* reduce AIncrementAssigner */
            {
                ArrayList<Object> list = new48();
                push(goTo(9), list, false);
            }
            break;
            case 49: /* reduce AAwhilebody1WhileBody */
            {
                ArrayList<Object> list = new49();
                push(goTo(10), list, false);
            }
            break;
            case 50: /* reduce AAwhilebody2WhileBody */
            {
                ArrayList<Object> list = new50();
                push(goTo(10), list, false);
            }
            break;
            case 51: /* reduce AAthenpart1ThenPart */
            {
                ArrayList<Object> list = new51();
                push(goTo(11), list, false);
            }
            break;
            case 52: /* reduce AAthenpart2ThenPart */
            {
                ArrayList<Object> list = new52();
                push(goTo(11), list, false);
            }
            break;
            case 53: /* reduce AAelsepart1ElsePart */
            {
                ArrayList<Object> list = new53();
                push(goTo(12), list, false);
            }
            break;
            case 54: /* reduce AAelsepart2ElsePart */
            {
                ArrayList<Object> list = new54();
                push(goTo(12), list, false);
            }
            break;
            case 55: /* reduce AEqExp */
            {
                ArrayList<Object> list = new55();
                push(goTo(13), list, false);
            }
            break;
            case 56: /* reduce ALtExp */
            {
                ArrayList<Object> list = new56();
                push(goTo(13), list, false);
            }
            break;
            case 57: /* reduce AGtExp */
            {
                ArrayList<Object> list = new57();
                push(goTo(13), list, false);
            }
            break;
            case 58: /* reduce ALeExp */
            {
                ArrayList<Object> list = new58();
                push(goTo(13), list, false);
            }
            break;
            case 59: /* reduce AGeExp */
            {
                ArrayList<Object> list = new59();
                push(goTo(13), list, false);
            }
            break;
            case 60: /* reduce ASimpleExp */
            {
                ArrayList<Object> list = new60();
                push(goTo(13), list, false);
            }
            break;
            case 61: /* reduce AAddAdditiveExp */
            {
                ArrayList<Object> list = new61();
                push(goTo(14), list, false);
            }
            break;
            case 62: /* reduce ASubAdditiveExp */
            {
                ArrayList<Object> list = new62();
                push(goTo(14), list, false);
            }
            break;
            case 63: /* reduce ASimpleAdditiveExp */
            {
                ArrayList<Object> list = new63();
                push(goTo(14), list, false);
            }
            break;
            case 64: /* reduce AMultMultExp */
            {
                ArrayList<Object> list = new64();
                push(goTo(15), list, false);
            }
            break;
            case 65: /* reduce AModuloMultExp */
            {
                ArrayList<Object> list = new65();
                push(goTo(15), list, false);
            }
            break;
            case 66: /* reduce ASimpleMultExp */
            {
                ArrayList<Object> list = new66();
                push(goTo(15), list, false);
            }
            break;
            case 67: /* reduce AFieldAccessUnary */
            {
                ArrayList<Object> list = new67();
                push(goTo(16), list, false);
            }
            break;
            case 68: /* reduce ASimpleUnary */
            {
                ArrayList<Object> list = new68();
                push(goTo(16), list, false);
            }
            break;
            case 69: /* reduce ATrueTerm */
            {
                ArrayList<Object> list = new69();
                push(goTo(17), list, false);
            }
            break;
            case 70: /* reduce AFalseTerm */
            {
                ArrayList<Object> list = new70();
                push(goTo(17), list, false);
            }
            break;
            case 71: /* reduce AAintegerterm1Term */
            {
                ArrayList<Object> list = new71();
                push(goTo(17), list, false);
            }
            break;
            case 72: /* reduce AAintegerterm2Term */
            {
                ArrayList<Object> list = new72();
                push(goTo(17), list, false);
            }
            break;
            case 73: /* reduce AStringTerm */
            {
                ArrayList<Object> list = new73();
                push(goTo(17), list, false);
            }
            break;
            case 74: /* reduce AVarTerm */
            {
                ArrayList<Object> list = new74();
                push(goTo(17), list, false);
            }
            break;
            case 75: /* reduce AParTerm */
            {
                ArrayList<Object> list = new75();
                push(goTo(17), list, false);
            }
            break;
            case 76: /* reduce AAfuncallterm1Term */
            {
                ArrayList<Object> list = new76();
                push(goTo(17), list, false);
            }
            break;
            case 77: /* reduce AAfuncallterm2Term */
            {
                ArrayList<Object> list = new77();
                push(goTo(17), list, false);
            }
            break;
            case 78: /* reduce AAstructterm1Term */
            {
                ArrayList<Object> list = new78();
                push(goTo(17), list, false);
            }
            break;
            case 79: /* reduce AAstructterm2Term */
            {
                ArrayList<Object> list = new79();
                push(goTo(17), list, false);
            }
            break;
            case 80: /* reduce AIncrementTerm */
            {
                ArrayList<Object> list = new80();
                push(goTo(17), list, false);
            }
            break;
            case 81: /* reduce APreAddIncrement */
            {
                ArrayList<Object> list = new81();
                push(goTo(18), list, false);
            }
            break;
            case 82: /* reduce APostAddIncrement */
            {
                ArrayList<Object> list = new82();
                push(goTo(18), list, false);
            }
            break;
            case 83: /* reduce APreSubIncrement */
            {
                ArrayList<Object> list = new83();
                push(goTo(18), list, false);
            }
            break;
            case 84: /* reduce APostSubIncrement */
            {
                ArrayList<Object> list = new84();
                push(goTo(18), list, false);
            }
            break;
            case 85: /* reduce AAparams1Params */
            {
                ArrayList<Object> list = new85();
                push(goTo(19), list, false);
            }
            break;
            case 86: /* reduce AAparams2Params */
            {
                ArrayList<Object> list = new86();
                push(goTo(19), list, false);
            }
            break;
            case 87: /* reduce AAdditionalParam */
            {
                ArrayList<Object> list = new87();
                push(goTo(20), list, false);
            }
            break;
            case 88: /* reduce AParam */
            {
                ArrayList<Object> list = new88();
                push(goTo(21), list, false);
            }
            break;
            case 89: /* reduce AAargs1Args */
            {
                ArrayList<Object> list = new89();
                push(goTo(22), list, false);
            }
            break;
            case 90: /* reduce AAargs2Args */
            {
                ArrayList<Object> list = new90();
                push(goTo(22), list, false);
            }
            break;
            case 91: /* reduce AAdditionalArg */
            {
                ArrayList<Object> list = new91();
                push(goTo(23), list, false);
            }
            break;
            case 92: /* reduce AArg */
            {
                ArrayList<Object> list = new92();
                push(goTo(24), list, false);
            }
            break;
            case 93: /* reduce ATerminal$StructDecl */
            {
                ArrayList<Object> list = new93();
                push(goTo(25), list, true);
            }
            break;
            case 94: /* reduce ANonTerminal$StructDecl */
            {
                ArrayList<Object> list = new94();
                push(goTo(25), list, true);
            }
            break;
            case 95: /* reduce ATerminal$FunDecl */
            {
                ArrayList<Object> list = new95();
                push(goTo(26), list, true);
            }
            break;
            case 96: /* reduce ANonTerminal$FunDecl */
            {
                ArrayList<Object> list = new96();
                push(goTo(26), list, true);
            }
            break;
            case 97: /* reduce ATerminal$Inst */
            {
                ArrayList<Object> list = new97();
                push(goTo(27), list, true);
            }
            break;
            case 98: /* reduce ANonTerminal$Inst */
            {
                ArrayList<Object> list = new98();
                push(goTo(27), list, true);
            }
            break;
            case 99: /* reduce ATerminal$AdditionalField */
            {
                ArrayList<Object> list = new99();
                push(goTo(28), list, true);
            }
            break;
            case 100: /* reduce ANonTerminal$AdditionalField */
            {
                ArrayList<Object> list = new100();
                push(goTo(28), list, true);
            }
            break;
            case 101: /* reduce ATerminal$AdditionalParam */
            {
                ArrayList<Object> list = new101();
                push(goTo(29), list, true);
            }
            break;
            case 102: /* reduce ANonTerminal$AdditionalParam */
            {
                ArrayList<Object> list = new102();
                push(goTo(29), list, true);
            }
            break;
            case 103: /* reduce ATerminal$AdditionalArg */
            {
                ArrayList<Object> list = new103();
                push(goTo(30), list, true);
            }
            break;
            case 104: /* reduce ANonTerminal$AdditionalArg */
            {
                ArrayList<Object> list = new104();
                push(goTo(30), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprog1Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PProg pprogNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }
        {
            // Block
        }

        pprogNode1 = new AProg(listNode2, listNode3, listNode4);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprog2Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }
        {
            // Block
        }

        pprogNode1 = new AProg(listNode3, listNode4, listNode5);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAprog3Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }

        pprogNode1 = new AProg(listNode2, listNode4, listNode5);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAprog4Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }

        pprogNode1 = new AProg(listNode3, listNode5, listNode6);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAprog5Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList1.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pprogNode1 = new AProg(listNode2, listNode3, listNode5);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAprog6Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList2.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pprogNode1 = new AProg(listNode3, listNode4, listNode6);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAprog7Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList2.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pprogNode1 = new AProg(listNode2, listNode4, listNode6);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAprog8Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList3.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pprogNode1 = new AProg(listNode3, listNode5, listNode7);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AStructDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStructDecl pstructdeclNode1;
        {
            // Block
        TStruct tstructNode2;
        TIdent tidentNode3;
        PFields pfieldsNode4;
        TEnd tendNode5;
        tstructNode2 = (TStruct)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);
        pfieldsNode4 = (PFields)nodeArrayList3.get(0);
        tendNode5 = (TEnd)nodeArrayList4.get(0);

        pstructdeclNode1 = new AStructDecl(tstructNode2, tidentNode3, pfieldsNode4, tendNode5);
        }
	nodeList.add(pstructdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAfields1Fields */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFields pfieldsNode1;
        {
            // Block
        PField pfieldNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pfieldNode2 = (PField)nodeArrayList1.get(0);
        {
            // Block
        }

        pfieldsNode1 = new AFields(pfieldNode2, listNode3);
        }
	nodeList.add(pfieldsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAfields2Fields */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFields pfieldsNode1;
        {
            // Block
        PField pfieldNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pfieldNode2 = (PField)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pfieldsNode1 = new AFields(pfieldNode2, listNode4);
        }
	nodeList.add(pfieldsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAdditionalField */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditionalField padditionalfieldNode1;
        {
            // Block
        TComma tcommaNode2;
        PField pfieldNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pfieldNode3 = (PField)nodeArrayList2.get(0);

        padditionalfieldNode1 = new AAdditionalField(tcommaNode2, pfieldNode3);
        }
	nodeList.add(padditionalfieldNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AField */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PField pfieldNode1;
        {
            // Block
        TIdent tidentNode2;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);

        pfieldNode1 = new AField(tidentNode2);
        }
	nodeList.add(pfieldNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TIntType tinttypeNode2;
        tinttypeNode2 = (TIntType)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tinttypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ABoolType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBoolType tbooltypeNode2;
        tbooltypeNode2 = (TBoolType)nodeArrayList1.get(0);

        ptypeNode1 = new ABoolType(tbooltypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AStringType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TStringType tstringtypeNode2;
        tstringtypeNode2 = (TStringType)nodeArrayList1.get(0);

        ptypeNode1 = new AStringType(tstringtypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AVoidType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TVoidType tvoidtypeNode2;
        tvoidtypeNode2 = (TVoidType)nodeArrayList1.get(0);

        ptypeNode1 = new AVoidType(tvoidtypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAfundecl1FunDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunDecl pfundeclNode1;
        {
            // Block
        PType ptypeNode2;
        TIdent tidentNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TDo tdoNode7;
        PFunBody pfunbodyNode8;
        TEnd tendNode9;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tdoNode7 = (TDo)nodeArrayList5.get(0);
        pfunbodyNode8 = (PFunBody)nodeArrayList6.get(0);
        tendNode9 = (TEnd)nodeArrayList7.get(0);

        pfundeclNode1 = new AFunDecl(ptypeNode2, tidentNode3, tlparNode4, null, trparNode6, tdoNode7, pfunbodyNode8, tendNode9);
        }
	nodeList.add(pfundeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAfundecl2FunDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunDecl pfundeclNode1;
        {
            // Block
        PType ptypeNode2;
        TIdent tidentNode3;
        TLPar tlparNode4;
        PParams pparamsNode5;
        TRPar trparNode6;
        TDo tdoNode7;
        PFunBody pfunbodyNode8;
        TEnd tendNode9;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparamsNode5 = (PParams)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tdoNode7 = (TDo)nodeArrayList6.get(0);
        pfunbodyNode8 = (PFunBody)nodeArrayList7.get(0);
        tendNode9 = (TEnd)nodeArrayList8.get(0);

        pfundeclNode1 = new AFunDecl(ptypeNode2, tidentNode3, tlparNode4, pparamsNode5, trparNode6, tdoNode7, pfunbodyNode8, tendNode9);
        }
	nodeList.add(pfundeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAfunbody1FunBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PFunBody pfunbodyNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pfunbodyNode1 = new AFunBody(listNode2);
        }
	nodeList.add(pfunbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAfunbody2FunBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunBody pfunbodyNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pfunbodyNode1 = new AFunBody(listNode3);
        }
	nodeList.add(pfunbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAssignerInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PAssigner passignerNode2;
        TSc tscNode3;
        passignerNode2 = (PAssigner)nodeArrayList1.get(0);
        tscNode3 = (TSc)nodeArrayList2.get(0);

        pinstNode1 = new AAssignerInst(passignerNode2, tscNode3);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAifinst1Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TIf tifNode2;
        PExp pexpNode3;
        PThenPart pthenpartNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TEnd tendNode6;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        pthenpartNode4 = (PThenPart)nodeArrayList3.get(0);
        tendNode6 = (TEnd)nodeArrayList4.get(0);

        pinstNode1 = new AIfInst(tifNode2, pexpNode3, pthenpartNode4, null, tendNode6);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAifinst2Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TIf tifNode2;
        PExp pexpNode3;
        PThenPart pthenpartNode4;
        PElsePart pelsepartNode5;
        TEnd tendNode6;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        pthenpartNode4 = (PThenPart)nodeArrayList3.get(0);
        pelsepartNode5 = (PElsePart)nodeArrayList4.get(0);
        tendNode6 = (TEnd)nodeArrayList5.get(0);

        pinstNode1 = new AIfInst(tifNode2, pexpNode3, pthenpartNode4, pelsepartNode5, tendNode6);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAblockinst1Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TDo tdoNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TEnd tendNode4;
        tdoNode2 = (TDo)nodeArrayList1.get(0);
        {
            // Block
        }
        tendNode4 = (TEnd)nodeArrayList2.get(0);

        pinstNode1 = new ABlockInst(tdoNode2, listNode3, tendNode4);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAblockinst2Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TDo tdoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TEnd tendNode5;
        tdoNode2 = (TDo)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tendNode5 = (TEnd)nodeArrayList3.get(0);

        pinstNode1 = new ABlockInst(tdoNode2, listNode4, tendNode5);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AWhileInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TWhile twhileNode2;
        PExp pexpNode3;
        TDo tdoNode4;
        PWhileBody pwhilebodyNode5;
        TEnd tendNode6;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tdoNode4 = (TDo)nodeArrayList3.get(0);
        pwhilebodyNode5 = (PWhileBody)nodeArrayList4.get(0);
        tendNode6 = (TEnd)nodeArrayList5.get(0);

        pinstNode1 = new AWhileInst(twhileNode2, pexpNode3, tdoNode4, pwhilebodyNode5, tendNode6);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAforinst1Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TFor tforNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TSc tscNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TSc tscNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        TRPar trparNode9;
        TDo tdoNode10;
        PWhileBody pwhilebodyNode11;
        TEnd tendNode12;
        tforNode2 = (TFor)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        tscNode5 = (TSc)nodeArrayList3.get(0);
        tscNode7 = (TSc)nodeArrayList4.get(0);
        trparNode9 = (TRPar)nodeArrayList5.get(0);
        tdoNode10 = (TDo)nodeArrayList6.get(0);
        pwhilebodyNode11 = (PWhileBody)nodeArrayList7.get(0);
        tendNode12 = (TEnd)nodeArrayList8.get(0);

        pinstNode1 = new AForInst(tforNode2, tlparNode3, null, tscNode5, null, tscNode7, null, trparNode9, tdoNode10, pwhilebodyNode11, tendNode12);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAforinst2Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TFor tforNode2;
        TLPar tlparNode3;
        PAssigner passignerNode4;
        TSc tscNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TSc tscNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        TRPar trparNode9;
        TDo tdoNode10;
        PWhileBody pwhilebodyNode11;
        TEnd tendNode12;
        tforNode2 = (TFor)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        passignerNode4 = (PAssigner)nodeArrayList3.get(0);
        tscNode5 = (TSc)nodeArrayList4.get(0);
        tscNode7 = (TSc)nodeArrayList5.get(0);
        trparNode9 = (TRPar)nodeArrayList6.get(0);
        tdoNode10 = (TDo)nodeArrayList7.get(0);
        pwhilebodyNode11 = (PWhileBody)nodeArrayList8.get(0);
        tendNode12 = (TEnd)nodeArrayList9.get(0);

        pinstNode1 = new AForInst(tforNode2, tlparNode3, passignerNode4, tscNode5, null, tscNode7, null, trparNode9, tdoNode10, pwhilebodyNode11, tendNode12);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAforinst3Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TFor tforNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TSc tscNode5;
        PExp pexpNode6;
        TSc tscNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        TRPar trparNode9;
        TDo tdoNode10;
        PWhileBody pwhilebodyNode11;
        TEnd tendNode12;
        tforNode2 = (TFor)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        tscNode5 = (TSc)nodeArrayList3.get(0);
        pexpNode6 = (PExp)nodeArrayList4.get(0);
        tscNode7 = (TSc)nodeArrayList5.get(0);
        trparNode9 = (TRPar)nodeArrayList6.get(0);
        tdoNode10 = (TDo)nodeArrayList7.get(0);
        pwhilebodyNode11 = (PWhileBody)nodeArrayList8.get(0);
        tendNode12 = (TEnd)nodeArrayList9.get(0);

        pinstNode1 = new AForInst(tforNode2, tlparNode3, null, tscNode5, pexpNode6, tscNode7, null, trparNode9, tdoNode10, pwhilebodyNode11, tendNode12);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAforinst4Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TFor tforNode2;
        TLPar tlparNode3;
        PAssigner passignerNode4;
        TSc tscNode5;
        PExp pexpNode6;
        TSc tscNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        TRPar trparNode9;
        TDo tdoNode10;
        PWhileBody pwhilebodyNode11;
        TEnd tendNode12;
        tforNode2 = (TFor)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        passignerNode4 = (PAssigner)nodeArrayList3.get(0);
        tscNode5 = (TSc)nodeArrayList4.get(0);
        pexpNode6 = (PExp)nodeArrayList5.get(0);
        tscNode7 = (TSc)nodeArrayList6.get(0);
        trparNode9 = (TRPar)nodeArrayList7.get(0);
        tdoNode10 = (TDo)nodeArrayList8.get(0);
        pwhilebodyNode11 = (PWhileBody)nodeArrayList9.get(0);
        tendNode12 = (TEnd)nodeArrayList10.get(0);

        pinstNode1 = new AForInst(tforNode2, tlparNode3, passignerNode4, tscNode5, pexpNode6, tscNode7, null, trparNode9, tdoNode10, pwhilebodyNode11, tendNode12);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAforinst5Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TFor tforNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TSc tscNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TSc tscNode7;
        PAssigner passignerNode8;
        TRPar trparNode9;
        TDo tdoNode10;
        PWhileBody pwhilebodyNode11;
        TEnd tendNode12;
        tforNode2 = (TFor)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        tscNode5 = (TSc)nodeArrayList3.get(0);
        tscNode7 = (TSc)nodeArrayList4.get(0);
        passignerNode8 = (PAssigner)nodeArrayList5.get(0);
        trparNode9 = (TRPar)nodeArrayList6.get(0);
        tdoNode10 = (TDo)nodeArrayList7.get(0);
        pwhilebodyNode11 = (PWhileBody)nodeArrayList8.get(0);
        tendNode12 = (TEnd)nodeArrayList9.get(0);

        pinstNode1 = new AForInst(tforNode2, tlparNode3, null, tscNode5, null, tscNode7, passignerNode8, trparNode9, tdoNode10, pwhilebodyNode11, tendNode12);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAforinst6Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TFor tforNode2;
        TLPar tlparNode3;
        PAssigner passignerNode4;
        TSc tscNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TSc tscNode7;
        PAssigner passignerNode8;
        TRPar trparNode9;
        TDo tdoNode10;
        PWhileBody pwhilebodyNode11;
        TEnd tendNode12;
        tforNode2 = (TFor)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        passignerNode4 = (PAssigner)nodeArrayList3.get(0);
        tscNode5 = (TSc)nodeArrayList4.get(0);
        tscNode7 = (TSc)nodeArrayList5.get(0);
        passignerNode8 = (PAssigner)nodeArrayList6.get(0);
        trparNode9 = (TRPar)nodeArrayList7.get(0);
        tdoNode10 = (TDo)nodeArrayList8.get(0);
        pwhilebodyNode11 = (PWhileBody)nodeArrayList9.get(0);
        tendNode12 = (TEnd)nodeArrayList10.get(0);

        pinstNode1 = new AForInst(tforNode2, tlparNode3, passignerNode4, tscNode5, null, tscNode7, passignerNode8, trparNode9, tdoNode10, pwhilebodyNode11, tendNode12);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAforinst7Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TFor tforNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TSc tscNode5;
        PExp pexpNode6;
        TSc tscNode7;
        PAssigner passignerNode8;
        TRPar trparNode9;
        TDo tdoNode10;
        PWhileBody pwhilebodyNode11;
        TEnd tendNode12;
        tforNode2 = (TFor)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        tscNode5 = (TSc)nodeArrayList3.get(0);
        pexpNode6 = (PExp)nodeArrayList4.get(0);
        tscNode7 = (TSc)nodeArrayList5.get(0);
        passignerNode8 = (PAssigner)nodeArrayList6.get(0);
        trparNode9 = (TRPar)nodeArrayList7.get(0);
        tdoNode10 = (TDo)nodeArrayList8.get(0);
        pwhilebodyNode11 = (PWhileBody)nodeArrayList9.get(0);
        tendNode12 = (TEnd)nodeArrayList10.get(0);

        pinstNode1 = new AForInst(tforNode2, tlparNode3, null, tscNode5, pexpNode6, tscNode7, passignerNode8, trparNode9, tdoNode10, pwhilebodyNode11, tendNode12);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AAforinst8Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TFor tforNode2;
        TLPar tlparNode3;
        PAssigner passignerNode4;
        TSc tscNode5;
        PExp pexpNode6;
        TSc tscNode7;
        PAssigner passignerNode8;
        TRPar trparNode9;
        TDo tdoNode10;
        PWhileBody pwhilebodyNode11;
        TEnd tendNode12;
        tforNode2 = (TFor)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        passignerNode4 = (PAssigner)nodeArrayList3.get(0);
        tscNode5 = (TSc)nodeArrayList4.get(0);
        pexpNode6 = (PExp)nodeArrayList5.get(0);
        tscNode7 = (TSc)nodeArrayList6.get(0);
        passignerNode8 = (PAssigner)nodeArrayList7.get(0);
        trparNode9 = (TRPar)nodeArrayList8.get(0);
        tdoNode10 = (TDo)nodeArrayList9.get(0);
        pwhilebodyNode11 = (PWhileBody)nodeArrayList10.get(0);
        tendNode12 = (TEnd)nodeArrayList11.get(0);

        pinstNode1 = new AForInst(tforNode2, tlparNode3, passignerNode4, tscNode5, pexpNode6, tscNode7, passignerNode8, trparNode9, tdoNode10, pwhilebodyNode11, tendNode12);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAreturninst1Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TReturn treturnNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TSc tscNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tscNode4 = (TSc)nodeArrayList2.get(0);

        pinstNode1 = new AReturnInst(treturnNode2, null, tscNode4);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAreturninst2Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TReturn treturnNode2;
        PExp pexpNode3;
        TSc tscNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tscNode4 = (TSc)nodeArrayList3.get(0);

        pinstNode1 = new AReturnInst(treturnNode2, pexpNode3, tscNode4);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAfuncallinst1Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TIdent tidentNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRPar trparNode5;
        TSc tscNode6;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);
        tscNode6 = (TSc)nodeArrayList4.get(0);

        pinstNode1 = new AFunCallInst(tidentNode2, tlparNode3, null, trparNode5, tscNode6);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAfuncallinst2Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TIdent tidentNode2;
        TLPar tlparNode3;
        PArgs pargsNode4;
        TRPar trparNode5;
        TSc tscNode6;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pargsNode4 = (PArgs)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tscNode6 = (TSc)nodeArrayList5.get(0);

        pinstNode1 = new AFunCallInst(tidentNode2, tlparNode3, pargsNode4, trparNode5, tscNode6);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce APrintExpInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TPrint tprintNode2;
        PExp pexpNode3;
        TSc tscNode4;
        tprintNode2 = (TPrint)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tscNode4 = (TSc)nodeArrayList3.get(0);

        pinstNode1 = new APrintExpInst(tprintNode2, pexpNode3, tscNode4);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce APrintlnInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TPrintln tprintlnNode2;
        TSc tscNode3;
        tprintlnNode2 = (TPrintln)nodeArrayList1.get(0);
        tscNode3 = (TSc)nodeArrayList2.get(0);

        pinstNode1 = new APrintlnInst(tprintlnNode2, tscNode3);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAframeadvanceinst1Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TFrameAdvance tframeadvanceNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TSc tscNode4;
        tframeadvanceNode2 = (TFrameAdvance)nodeArrayList1.get(0);
        tscNode4 = (TSc)nodeArrayList2.get(0);

        pinstNode1 = new AFrameAdvanceInst(tframeadvanceNode2, null, tscNode4);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAframeadvanceinst2Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TFrameAdvance tframeadvanceNode2;
        PExp pexpNode3;
        TSc tscNode4;
        tframeadvanceNode2 = (TFrameAdvance)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tscNode4 = (TSc)nodeArrayList3.get(0);

        pinstNode1 = new AFrameAdvanceInst(tframeadvanceNode2, pexpNode3, tscNode4);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AWalkInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TWalk twalkNode2;
        TLPar tlparNode3;
        PArgs pargsNode4;
        TRPar trparNode5;
        TSc tscNode6;
        twalkNode2 = (TWalk)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pargsNode4 = (PArgs)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tscNode6 = (TSc)nodeArrayList5.get(0);

        pinstNode1 = new AWalkInst(twalkNode2, tlparNode3, pargsNode4, trparNode5, tscNode6);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AMoveCamInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TMoveCam tmovecamNode2;
        TLPar tlparNode3;
        PArgs pargsNode4;
        TRPar trparNode5;
        TSc tscNode6;
        tmovecamNode2 = (TMoveCam)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pargsNode4 = (PArgs)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tscNode6 = (TSc)nodeArrayList5.get(0);

        pinstNode1 = new AMoveCamInst(tmovecamNode2, tlparNode3, pargsNode4, trparNode5, tscNode6);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ADeclAssigner */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssigner passignerNode1;
        {
            // Block
        TVar tvarNode2;
        TIdent tidentNode3;
        TAssign tassignNode4;
        PExp pexpNode5;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);
        tassignNode4 = (TAssign)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);

        passignerNode1 = new ADeclAssigner(tvarNode2, tidentNode3, tassignNode4, pexpNode5);
        }
	nodeList.add(passignerNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAssignAssigner */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssigner passignerNode1;
        {
            // Block
        TIdent tidentNode2;
        TAssign tassignNode3;
        PExp pexpNode4;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        passignerNode1 = new AAssignAssigner(tidentNode2, tassignNode3, pexpNode4);
        }
	nodeList.add(passignerNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AFieldAssignAssigner */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssigner passignerNode1;
        {
            // Block
        PUnary punaryNode2;
        TDot tdotNode3;
        TIdent tidentNode4;
        TAssign tassignNode5;
        PExp pexpNode6;
        punaryNode2 = (PUnary)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tidentNode4 = (TIdent)nodeArrayList3.get(0);
        tassignNode5 = (TAssign)nodeArrayList4.get(0);
        pexpNode6 = (PExp)nodeArrayList5.get(0);

        passignerNode1 = new AFieldAssignAssigner(punaryNode2, tdotNode3, tidentNode4, tassignNode5, pexpNode6);
        }
	nodeList.add(passignerNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AIncrementAssigner */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssigner passignerNode1;
        {
            // Block
        PIncrement pincrementNode2;
        pincrementNode2 = (PIncrement)nodeArrayList1.get(0);

        passignerNode1 = new AIncrementAssigner(pincrementNode2);
        }
	nodeList.add(passignerNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AAwhilebody1WhileBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PWhileBody pwhilebodyNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pwhilebodyNode1 = new AWhileBody(listNode2);
        }
	nodeList.add(pwhilebodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAwhilebody2WhileBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWhileBody pwhilebodyNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pwhilebodyNode1 = new AWhileBody(listNode3);
        }
	nodeList.add(pwhilebodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAthenpart1ThenPart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PThenPart pthenpartNode1;
        {
            // Block
        TThen tthenNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tthenNode2 = (TThen)nodeArrayList1.get(0);
        {
            // Block
        }

        pthenpartNode1 = new AThenPart(tthenNode2, listNode3);
        }
	nodeList.add(pthenpartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAthenpart2ThenPart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PThenPart pthenpartNode1;
        {
            // Block
        TThen tthenNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tthenNode2 = (TThen)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pthenpartNode1 = new AThenPart(tthenNode2, listNode4);
        }
	nodeList.add(pthenpartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AAelsepart1ElsePart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElsePart pelsepartNode1;
        {
            // Block
        TElse telseNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        telseNode2 = (TElse)nodeArrayList1.get(0);
        {
            // Block
        }

        pelsepartNode1 = new AElsePart(telseNode2, listNode3);
        }
	nodeList.add(pelsepartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AAelsepart2ElsePart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElsePart pelsepartNode1;
        {
            // Block
        TElse telseNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        telseNode2 = (TElse)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pelsepartNode1 = new AElsePart(telseNode2, listNode4);
        }
	nodeList.add(pelsepartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AEqExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TEq teqNode3;
        PAdditiveExp padditiveexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        teqNode3 = (TEq)nodeArrayList2.get(0);
        padditiveexpNode4 = (PAdditiveExp)nodeArrayList3.get(0);

        pexpNode1 = new AEqExp(pexpNode2, teqNode3, padditiveexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ALtExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TLt tltNode3;
        PAdditiveExp padditiveexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tltNode3 = (TLt)nodeArrayList2.get(0);
        padditiveexpNode4 = (PAdditiveExp)nodeArrayList3.get(0);

        pexpNode1 = new ALtExp(pexpNode2, tltNode3, padditiveexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AGtExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TGt tgtNode3;
        PAdditiveExp padditiveexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tgtNode3 = (TGt)nodeArrayList2.get(0);
        padditiveexpNode4 = (PAdditiveExp)nodeArrayList3.get(0);

        pexpNode1 = new AGtExp(pexpNode2, tgtNode3, padditiveexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ALeExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TLt tltNode3;
        TAssign tassignNode4;
        PAdditiveExp padditiveexpNode5;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tltNode3 = (TLt)nodeArrayList2.get(0);
        tassignNode4 = (TAssign)nodeArrayList3.get(0);
        padditiveexpNode5 = (PAdditiveExp)nodeArrayList4.get(0);

        pexpNode1 = new ALeExp(pexpNode2, tltNode3, tassignNode4, padditiveexpNode5);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AGeExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TGt tgtNode3;
        TAssign tassignNode4;
        PAdditiveExp padditiveexpNode5;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tgtNode3 = (TGt)nodeArrayList2.get(0);
        tassignNode4 = (TAssign)nodeArrayList3.get(0);
        padditiveexpNode5 = (PAdditiveExp)nodeArrayList4.get(0);

        pexpNode1 = new AGeExp(pexpNode2, tgtNode3, tassignNode4, padditiveexpNode5);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ASimpleExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PAdditiveExp padditiveexpNode2;
        padditiveexpNode2 = (PAdditiveExp)nodeArrayList1.get(0);

        pexpNode1 = new ASimpleExp(padditiveexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AAddAdditiveExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditiveExp padditiveexpNode1;
        {
            // Block
        PAdditiveExp padditiveexpNode2;
        TPlus tplusNode3;
        PMultExp pmultexpNode4;
        padditiveexpNode2 = (PAdditiveExp)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pmultexpNode4 = (PMultExp)nodeArrayList3.get(0);

        padditiveexpNode1 = new AAddAdditiveExp(padditiveexpNode2, tplusNode3, pmultexpNode4);
        }
	nodeList.add(padditiveexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ASubAdditiveExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditiveExp padditiveexpNode1;
        {
            // Block
        PAdditiveExp padditiveexpNode2;
        TMinus tminusNode3;
        PMultExp pmultexpNode4;
        padditiveexpNode2 = (PAdditiveExp)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pmultexpNode4 = (PMultExp)nodeArrayList3.get(0);

        padditiveexpNode1 = new ASubAdditiveExp(padditiveexpNode2, tminusNode3, pmultexpNode4);
        }
	nodeList.add(padditiveexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ASimpleAdditiveExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditiveExp padditiveexpNode1;
        {
            // Block
        PMultExp pmultexpNode2;
        pmultexpNode2 = (PMultExp)nodeArrayList1.get(0);

        padditiveexpNode1 = new ASimpleAdditiveExp(pmultexpNode2);
        }
	nodeList.add(padditiveexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AMultMultExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultExp pmultexpNode1;
        {
            // Block
        PMultExp pmultexpNode2;
        TMult tmultNode3;
        PUnary punaryNode4;
        pmultexpNode2 = (PMultExp)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        punaryNode4 = (PUnary)nodeArrayList3.get(0);

        pmultexpNode1 = new AMultMultExp(pmultexpNode2, tmultNode3, punaryNode4);
        }
	nodeList.add(pmultexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AModuloMultExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultExp pmultexpNode1;
        {
            // Block
        PMultExp pmultexpNode2;
        TModulo tmoduloNode3;
        PUnary punaryNode4;
        pmultexpNode2 = (PMultExp)nodeArrayList1.get(0);
        tmoduloNode3 = (TModulo)nodeArrayList2.get(0);
        punaryNode4 = (PUnary)nodeArrayList3.get(0);

        pmultexpNode1 = new AModuloMultExp(pmultexpNode2, tmoduloNode3, punaryNode4);
        }
	nodeList.add(pmultexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ASimpleMultExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultExp pmultexpNode1;
        {
            // Block
        PUnary punaryNode2;
        punaryNode2 = (PUnary)nodeArrayList1.get(0);

        pmultexpNode1 = new ASimpleMultExp(punaryNode2);
        }
	nodeList.add(pmultexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AFieldAccessUnary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnary punaryNode1;
        {
            // Block
        PUnary punaryNode2;
        TDot tdotNode3;
        TIdent tidentNode4;
        punaryNode2 = (PUnary)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tidentNode4 = (TIdent)nodeArrayList3.get(0);

        punaryNode1 = new AFieldAccessUnary(punaryNode2, tdotNode3, tidentNode4);
        }
	nodeList.add(punaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ASimpleUnary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnary punaryNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        punaryNode1 = new ASimpleUnary(ptermNode2);
        }
	nodeList.add(punaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ATrueTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        ptermNode1 = new ATrueTerm(ttrueNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AFalseTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        ptermNode1 = new AFalseTerm(tfalseNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AAintegerterm1Term */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TInteger tintegerNode3;
        tintegerNode3 = (TInteger)nodeArrayList1.get(0);

        ptermNode1 = new AIntegerTerm(null, tintegerNode3);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AAintegerterm2Term */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TMinus tminusNode2;
        TInteger tintegerNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        tintegerNode3 = (TInteger)nodeArrayList2.get(0);

        ptermNode1 = new AIntegerTerm(tminusNode2, tintegerNode3);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AStringTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptermNode1 = new AStringTerm(tstringNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AVarTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TIdent tidentNode2;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);

        ptermNode1 = new AVarTerm(tidentNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AParTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TLPar tlparNode2;
        PExp pexpNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        ptermNode1 = new AParTerm(tlparNode2, pexpNode3, trparNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AAfuncallterm1Term */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TIdent tidentNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRPar trparNode5;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);

        ptermNode1 = new AFunCallTerm(tidentNode2, tlparNode3, null, trparNode5);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AAfuncallterm2Term */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TIdent tidentNode2;
        TLPar tlparNode3;
        PArgs pargsNode4;
        TRPar trparNode5;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pargsNode4 = (PArgs)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        ptermNode1 = new AFunCallTerm(tidentNode2, tlparNode3, pargsNode4, trparNode5);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AAstructterm1Term */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TStruct tstructNode2;
        TIdent tidentNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        tstructNode2 = (TStruct)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);

        ptermNode1 = new AStructTerm(tstructNode2, tidentNode3, tlparNode4, null, trparNode6);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AAstructterm2Term */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TStruct tstructNode2;
        TIdent tidentNode3;
        TLPar tlparNode4;
        PArgs pargsNode5;
        TRPar trparNode6;
        tstructNode2 = (TStruct)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pargsNode5 = (PArgs)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);

        ptermNode1 = new AStructTerm(tstructNode2, tidentNode3, tlparNode4, pargsNode5, trparNode6);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AIncrementTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PIncrement pincrementNode2;
        pincrementNode2 = (PIncrement)nodeArrayList1.get(0);

        ptermNode1 = new AIncrementTerm(pincrementNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce APreAddIncrement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIncrement pincrementNode1;
        {
            // Block
        TPlusInc tplusincNode2;
        TIdent tidentNode3;
        tplusincNode2 = (TPlusInc)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);

        pincrementNode1 = new APreAddIncrement(tplusincNode2, tidentNode3);
        }
	nodeList.add(pincrementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce APostAddIncrement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIncrement pincrementNode1;
        {
            // Block
        TIdent tidentNode2;
        TPlusInc tplusincNode3;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        tplusincNode3 = (TPlusInc)nodeArrayList2.get(0);

        pincrementNode1 = new APostAddIncrement(tidentNode2, tplusincNode3);
        }
	nodeList.add(pincrementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce APreSubIncrement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIncrement pincrementNode1;
        {
            // Block
        TMinusInc tminusincNode2;
        TIdent tidentNode3;
        tminusincNode2 = (TMinusInc)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);

        pincrementNode1 = new APreSubIncrement(tminusincNode2, tidentNode3);
        }
	nodeList.add(pincrementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce APostSubIncrement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIncrement pincrementNode1;
        {
            // Block
        TIdent tidentNode2;
        TMinusInc tminusincNode3;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        tminusincNode3 = (TMinusInc)nodeArrayList2.get(0);

        pincrementNode1 = new APostSubIncrement(tidentNode2, tminusincNode3);
        }
	nodeList.add(pincrementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce AAparams1Params */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParams pparamsNode1;
        {
            // Block
        PParam pparamNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pparamNode2 = (PParam)nodeArrayList1.get(0);
        {
            // Block
        }

        pparamsNode1 = new AParams(pparamNode2, listNode3);
        }
	nodeList.add(pparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce AAparams2Params */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParams pparamsNode1;
        {
            // Block
        PParam pparamNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pparamNode2 = (PParam)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pparamsNode1 = new AParams(pparamNode2, listNode4);
        }
	nodeList.add(pparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce AAdditionalParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditionalParam padditionalparamNode1;
        {
            // Block
        TComma tcommaNode2;
        PParam pparamNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pparamNode3 = (PParam)nodeArrayList2.get(0);

        padditionalparamNode1 = new AAdditionalParam(tcommaNode2, pparamNode3);
        }
	nodeList.add(padditionalparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce AParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParam pparamNode1;
        {
            // Block
        PType ptypeNode2;
        TIdent tidentNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);

        pparamNode1 = new AParam(ptypeNode2, tidentNode3);
        }
	nodeList.add(pparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce AAargs1Args */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        PArg pargNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pargNode2 = (PArg)nodeArrayList1.get(0);
        {
            // Block
        }

        pargsNode1 = new AArgs(pargNode2, listNode3);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce AAargs2Args */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        PArg pargNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pargNode2 = (PArg)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pargsNode1 = new AArgs(pargNode2, listNode4);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce AAdditionalArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditionalArg padditionalargNode1;
        {
            // Block
        TComma tcommaNode2;
        PArg pargNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pargNode3 = (PArg)nodeArrayList2.get(0);

        padditionalargNode1 = new AAdditionalArg(tcommaNode2, pargNode3);
        }
	nodeList.add(padditionalargNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce AArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArg pargNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pargNode1 = new AArg(pexpNode2);
        }
	nodeList.add(pargNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce ATerminal$StructDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStructDecl pstructdeclNode1;
        pstructdeclNode1 = (PStructDecl)nodeArrayList1.get(0);
	if(pstructdeclNode1 != null)
	{
	  listNode2.add(pstructdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce ANonTerminal$StructDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStructDecl pstructdeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstructdeclNode2 = (PStructDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstructdeclNode2 != null)
	{
	  listNode3.add(pstructdeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce ATerminal$FunDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PFunDecl pfundeclNode1;
        pfundeclNode1 = (PFunDecl)nodeArrayList1.get(0);
	if(pfundeclNode1 != null)
	{
	  listNode2.add(pfundeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce ANonTerminal$FunDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PFunDecl pfundeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfundeclNode2 = (PFunDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfundeclNode2 != null)
	{
	  listNode3.add(pfundeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce ATerminal$Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PInst pinstNode1;
        pinstNode1 = (PInst)nodeArrayList1.get(0);
	if(pinstNode1 != null)
	{
	  listNode2.add(pinstNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce ANonTerminal$Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PInst pinstNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pinstNode2 = (PInst)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pinstNode2 != null)
	{
	  listNode3.add(pinstNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce ATerminal$AdditionalField */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAdditionalField padditionalfieldNode1;
        padditionalfieldNode1 = (PAdditionalField)nodeArrayList1.get(0);
	if(padditionalfieldNode1 != null)
	{
	  listNode2.add(padditionalfieldNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce ANonTerminal$AdditionalField */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAdditionalField padditionalfieldNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padditionalfieldNode2 = (PAdditionalField)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padditionalfieldNode2 != null)
	{
	  listNode3.add(padditionalfieldNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce ATerminal$AdditionalParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAdditionalParam padditionalparamNode1;
        padditionalparamNode1 = (PAdditionalParam)nodeArrayList1.get(0);
	if(padditionalparamNode1 != null)
	{
	  listNode2.add(padditionalparamNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce ANonTerminal$AdditionalParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAdditionalParam padditionalparamNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padditionalparamNode2 = (PAdditionalParam)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padditionalparamNode2 != null)
	{
	  listNode3.add(padditionalparamNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new103() /* reduce ATerminal$AdditionalArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAdditionalArg padditionalargNode1;
        padditionalargNode1 = (PAdditionalArg)nodeArrayList1.get(0);
	if(padditionalargNode1 != null)
	{
	  listNode2.add(padditionalargNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new104() /* reduce ANonTerminal$AdditionalArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAdditionalArg padditionalargNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padditionalargNode2 = (PAdditionalArg)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padditionalargNode2 != null)
	{
	  listNode3.add(padditionalargNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {8, SHIFT, 6}, {9, SHIFT, 7}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, {14, SHIFT, 12}, {15, SHIFT, 13}, {16, SHIFT, 14}, {17, SHIFT, 15}, {18, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 1}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 39}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 2}, {21, SHIFT, 45}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 5}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 39}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 6}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {21, SHIFT, 47}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 39}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 7}, {36, SHIFT, 49}, },
			{{-1, ERROR, 8}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {7, SHIFT, 50}, {8, SHIFT, 6}, {9, SHIFT, 38}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, {18, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 9}, {36, SHIFT, 52}, },
			{{-1, ERROR, 10}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 39}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 11}, {34, SHIFT, 54}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 16}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {21, SHIFT, 55}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 39}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 17}, {34, SHIFT, 57}, },
			{{-1, ERROR, 18}, {34, SHIFT, 58}, },
			{{-1, ERROR, 19}, {38, SHIFT, 59}, },
			{{-1, ERROR, 20}, {36, SHIFT, 60}, },
			{{-1, ERROR, 21}, {36, SHIFT, 61}, },
			{{-1, ERROR, 22}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 39}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, REDUCE, 74}, {22, SHIFT, 63}, {26, SHIFT, 64}, {27, SHIFT, 65}, {34, SHIFT, 66}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 26}, {40, ACCEPT, -1}, },
			{{-1, REDUCE, 93}, },
			{{-1, ERROR, 28}, {36, SHIFT, 67}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 97}, },
			{{-1, ERROR, 31}, {21, SHIFT, 68}, },
			{{-1, ERROR, 32}, {33, SHIFT, 69}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 48}, {33, REDUCE, 80}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {8, SHIFT, 6}, {9, SHIFT, 7}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, {14, SHIFT, 12}, {15, SHIFT, 13}, {16, SHIFT, 14}, {17, SHIFT, 15}, {18, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, REDUCE, 2}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {8, SHIFT, 6}, {9, SHIFT, 38}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, {14, SHIFT, 12}, {15, SHIFT, 13}, {16, SHIFT, 14}, {17, SHIFT, 15}, {18, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, REDUCE, 4}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {8, SHIFT, 6}, {9, SHIFT, 38}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, {18, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 38}, {36, SHIFT, 76}, },
			{{-1, REDUCE, 74}, {26, SHIFT, 64}, {27, SHIFT, 65}, {34, SHIFT, 77}, },
			{{-1, ERROR, 40}, {21, SHIFT, 78}, {29, SHIFT, 79}, {30, SHIFT, 80}, {31, SHIFT, 81}, },
			{{-1, REDUCE, 60}, {23, SHIFT, 82}, {24, SHIFT, 83}, },
			{{-1, REDUCE, 63}, {25, SHIFT, 84}, {28, SHIFT, 85}, },
			{{-1, REDUCE, 66}, {33, SHIFT, 86}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 46}, {5, SHIFT, 87}, {29, SHIFT, 79}, {30, SHIFT, 80}, {31, SHIFT, 81}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 48}, {21, SHIFT, 89}, {29, SHIFT, 79}, {30, SHIFT, 80}, {31, SHIFT, 81}, },
			{{-1, ERROR, 49}, {34, SHIFT, 90}, {36, SHIFT, 91}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 51}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {7, SHIFT, 94}, {8, SHIFT, 6}, {9, SHIFT, 38}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, {18, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 52}, {22, SHIFT, 95}, },
			{{-1, ERROR, 53}, {10, SHIFT, 96}, {29, SHIFT, 79}, {30, SHIFT, 80}, {31, SHIFT, 81}, },
			{{-1, ERROR, 54}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {11, SHIFT, 9}, {21, SHIFT, 97}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 98}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 56}, {21, SHIFT, 100}, {29, SHIFT, 79}, {30, SHIFT, 80}, {31, SHIFT, 81}, },
			{{-1, ERROR, 57}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 39}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 58}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 39}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 62}, {29, SHIFT, 79}, {30, SHIFT, 80}, {31, SHIFT, 81}, {35, SHIFT, 105}, },
			{{-1, ERROR, 63}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 39}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 84}, },
			{{-1, ERROR, 66}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 107}, {36, SHIFT, 39}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 67}, {34, SHIFT, 109}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 69}, {36, SHIFT, 110}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {8, SHIFT, 6}, {9, SHIFT, 38}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, {14, SHIFT, 12}, {15, SHIFT, 13}, {16, SHIFT, 14}, {17, SHIFT, 15}, {18, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, REDUCE, 5}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {8, SHIFT, 6}, {9, SHIFT, 38}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, {18, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 6}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {8, SHIFT, 6}, {9, SHIFT, 38}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, {18, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, REDUCE, 98}, },
			{{-1, ERROR, 76}, {34, SHIFT, 90}, },
			{{-1, ERROR, 77}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 112}, {36, SHIFT, 39}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 79}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {22, SHIFT, 114}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 39}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 80}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {22, SHIFT, 116}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 39}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 81}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 39}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 82}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 39}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 83}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 39}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 84}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 39}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 85}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 39}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 86}, {36, SHIFT, 123}, },
			{{-1, REDUCE, 51}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {8, SHIFT, 6}, {9, SHIFT, 38}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, {18, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 88}, {6, SHIFT, 125}, {7, SHIFT, 126}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 90}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 128}, {36, SHIFT, 39}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 92}, {7, SHIFT, 130}, },
			{{-1, REDUCE, 9}, {32, SHIFT, 131}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 95}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 39}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, REDUCE, 49}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {8, SHIFT, 6}, {9, SHIFT, 38}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, {18, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 97}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {21, SHIFT, 137}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 39}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, REDUCE, 74}, {22, SHIFT, 63}, {26, SHIFT, 64}, {27, SHIFT, 65}, {34, SHIFT, 77}, },
			{{-1, ERROR, 99}, {21, SHIFT, 139}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 92}, {29, SHIFT, 79}, {30, SHIFT, 80}, {31, SHIFT, 81}, },
			{{-1, ERROR, 102}, {35, SHIFT, 140}, },
			{{-1, REDUCE, 89}, {32, SHIFT, 141}, },
			{{-1, ERROR, 104}, {35, SHIFT, 144}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 46}, {29, SHIFT, 79}, {30, SHIFT, 80}, {31, SHIFT, 81}, },
			{{-1, REDUCE, 76}, {21, SHIFT, 145}, },
			{{-1, ERROR, 108}, {35, SHIFT, 146}, },
			{{-1, ERROR, 109}, {14, SHIFT, 12}, {15, SHIFT, 13}, {16, SHIFT, 14}, {17, SHIFT, 15}, {35, SHIFT, 147}, },
			{{-1, REDUCE, 67}, {22, SHIFT, 151}, },
			{{-1, REDUCE, 7}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {8, SHIFT, 6}, {9, SHIFT, 38}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, {18, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 113}, {35, SHIFT, 152}, },
			{{-1, ERROR, 114}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 39}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, REDUCE, 56}, {23, SHIFT, 82}, {24, SHIFT, 83}, },
			{{-1, ERROR, 116}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 39}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, REDUCE, 57}, {23, SHIFT, 82}, {24, SHIFT, 83}, },
			{{-1, REDUCE, 55}, {23, SHIFT, 82}, {24, SHIFT, 83}, },
			{{-1, REDUCE, 61}, {25, SHIFT, 84}, {28, SHIFT, 85}, },
			{{-1, REDUCE, 62}, {25, SHIFT, 84}, {28, SHIFT, 85}, },
			{{-1, REDUCE, 64}, {33, SHIFT, 86}, },
			{{-1, REDUCE, 65}, {33, SHIFT, 86}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 52}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {8, SHIFT, 6}, {9, SHIFT, 38}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, {18, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, REDUCE, 53}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {8, SHIFT, 6}, {9, SHIFT, 38}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, {18, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 127}, {7, SHIFT, 156}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 129}, {35, SHIFT, 157}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 131}, {36, SHIFT, 91}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 10}, {32, SHIFT, 131}, },
			{{-1, REDUCE, 45}, {29, SHIFT, 79}, {30, SHIFT, 80}, {31, SHIFT, 81}, },
			{{-1, ERROR, 135}, {7, SHIFT, 160}, },
			{{-1, REDUCE, 50}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {8, SHIFT, 6}, {9, SHIFT, 38}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, {18, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 137}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {11, SHIFT, 9}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 161}, {36, SHIFT, 98}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 138}, {21, SHIFT, 163}, {29, SHIFT, 79}, {30, SHIFT, 80}, {31, SHIFT, 81}, },
			{{-1, ERROR, 139}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {21, SHIFT, 164}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 39}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 140}, {21, SHIFT, 166}, },
			{{-1, ERROR, 141}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 39}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 90}, {32, SHIFT, 141}, },
			{{-1, ERROR, 144}, {21, SHIFT, 169}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 77}, {21, SHIFT, 170}, },
			{{-1, ERROR, 147}, {10, SHIFT, 171}, },
			{{-1, ERROR, 148}, {36, SHIFT, 172}, },
			{{-1, ERROR, 149}, {35, SHIFT, 173}, },
			{{-1, REDUCE, 85}, {32, SHIFT, 174}, },
			{{-1, ERROR, 151}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 39}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 58}, {23, SHIFT, 82}, {24, SHIFT, 83}, },
			{{-1, REDUCE, 59}, {23, SHIFT, 82}, {24, SHIFT, 83}, },
			{{-1, REDUCE, 54}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {8, SHIFT, 6}, {9, SHIFT, 38}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, {18, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 161}, {10, SHIFT, 178}, },
			{{-1, ERROR, 162}, {35, SHIFT, 179}, },
			{{-1, ERROR, 163}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {11, SHIFT, 9}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 180}, {36, SHIFT, 98}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 164}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {11, SHIFT, 9}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 182}, {36, SHIFT, 98}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 165}, {21, SHIFT, 184}, {29, SHIFT, 79}, {30, SHIFT, 80}, {31, SHIFT, 81}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 104}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 19}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {8, SHIFT, 6}, {9, SHIFT, 38}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, {18, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, REDUCE, 88}, },
			{{-1, ERROR, 173}, {10, SHIFT, 187}, },
			{{-1, ERROR, 174}, {14, SHIFT, 12}, {15, SHIFT, 13}, {16, SHIFT, 14}, {17, SHIFT, 15}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 86}, {32, SHIFT, 174}, },
			{{-1, REDUCE, 47}, {29, SHIFT, 79}, {30, SHIFT, 80}, {31, SHIFT, 81}, },
			{{-1, REDUCE, 49}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {8, SHIFT, 6}, {9, SHIFT, 38}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, {18, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 179}, {10, SHIFT, 191}, },
			{{-1, ERROR, 180}, {10, SHIFT, 192}, },
			{{-1, ERROR, 181}, {35, SHIFT, 193}, },
			{{-1, ERROR, 182}, {10, SHIFT, 194}, },
			{{-1, ERROR, 183}, {35, SHIFT, 195}, },
			{{-1, ERROR, 184}, {2, SHIFT, 3}, {3, SHIFT, 4}, {9, SHIFT, 38}, {11, SHIFT, 9}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 196}, {36, SHIFT, 98}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 185}, {7, SHIFT, 198}, },
			{{-1, REDUCE, 20}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {8, SHIFT, 6}, {9, SHIFT, 38}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, {18, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, REDUCE, 19}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {8, SHIFT, 6}, {9, SHIFT, 38}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, {18, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 102}, },
			{{-1, ERROR, 190}, {7, SHIFT, 200}, },
			{{-1, REDUCE, 49}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {8, SHIFT, 6}, {9, SHIFT, 38}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, {18, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, REDUCE, 49}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {8, SHIFT, 6}, {9, SHIFT, 38}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, {18, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 193}, {10, SHIFT, 203}, },
			{{-1, REDUCE, 49}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {8, SHIFT, 6}, {9, SHIFT, 38}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, {18, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 195}, {10, SHIFT, 205}, },
			{{-1, ERROR, 196}, {10, SHIFT, 206}, },
			{{-1, ERROR, 197}, {35, SHIFT, 207}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 199}, {7, SHIFT, 208}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 201}, {7, SHIFT, 209}, },
			{{-1, ERROR, 202}, {7, SHIFT, 210}, },
			{{-1, REDUCE, 49}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {8, SHIFT, 6}, {9, SHIFT, 38}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, {18, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 204}, {7, SHIFT, 212}, },
			{{-1, REDUCE, 49}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {8, SHIFT, 6}, {9, SHIFT, 38}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, {18, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, REDUCE, 49}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {8, SHIFT, 6}, {9, SHIFT, 38}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, {18, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, ERROR, 207}, {10, SHIFT, 215}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 211}, {7, SHIFT, 216}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 213}, {7, SHIFT, 217}, },
			{{-1, ERROR, 214}, {7, SHIFT, 218}, },
			{{-1, REDUCE, 49}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {3, SHIFT, 4}, {4, SHIFT, 5}, {8, SHIFT, 6}, {9, SHIFT, 38}, {10, SHIFT, 8}, {11, SHIFT, 9}, {12, SHIFT, 10}, {13, SHIFT, 11}, {18, SHIFT, 16}, {19, SHIFT, 17}, {20, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {34, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 219}, {7, SHIFT, 220}, },
			{{-1, REDUCE, 34}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 26}, },
			{{-1, 27}, {35, 70}, },
			{{-1, 92}, },
			{{-1, 132}, {133, 159}, },
			{{-1, 93}, {131, 158}, },
			{{-1, 28}, {109, 148}, {174, 148}, },
			{{-1, 29}, {36, 73}, {71, 73}, },
			{{-1, 185}, {187, 199}, },
			{{-1, 30}, {37, 75}, {51, 75}, {72, 75}, {74, 75}, {111, 75}, {124, 75}, {136, 75}, {155, 75}, {186, 75}, },
			{{-1, 31}, {54, 99}, {137, 162}, {163, 181}, {164, 183}, {184, 197}, },
			{{-1, 135}, {178, 190}, {191, 201}, {192, 202}, {194, 204}, {203, 211}, {205, 213}, {206, 214}, {215, 219}, },
			{{-1, 88}, },
			{{-1, 127}, },
			{{-1, 101}, {1, 40}, {5, 46}, {6, 48}, {10, 53}, {16, 56}, {22, 62}, {63, 106}, {95, 134}, {97, 138}, {139, 165}, {151, 177}, },
			{{-1, 41}, {79, 115}, {80, 117}, {81, 118}, {114, 153}, {116, 154}, },
			{{-1, 42}, {82, 119}, {83, 120}, },
			{{-1, 32}, {1, 43}, {5, 43}, {6, 43}, {10, 43}, {16, 43}, {22, 43}, {57, 43}, {58, 43}, {63, 43}, {66, 43}, {77, 43}, {79, 43}, {80, 43}, {81, 43}, {82, 43}, {83, 43}, {84, 121}, {85, 122}, {90, 43}, {95, 43}, {97, 43}, {114, 43}, {116, 43}, {139, 43}, {141, 43}, {151, 43}, },
			{{-1, 33}, },
			{{-1, 34}, {1, 44}, {5, 44}, {6, 44}, {10, 44}, {16, 44}, {22, 44}, {57, 44}, {58, 44}, {63, 44}, {66, 44}, {77, 44}, {79, 44}, {80, 44}, {81, 44}, {82, 44}, {83, 44}, {84, 44}, {85, 44}, {90, 44}, {95, 44}, {97, 44}, {114, 44}, {116, 44}, {139, 44}, {141, 44}, {151, 44}, },
			{{-1, 149}, },
			{{-1, 175}, {176, 189}, },
			{{-1, 150}, {174, 188}, },
			{{-1, 102}, {58, 104}, {66, 108}, {77, 113}, {90, 129}, },
			{{-1, 142}, {143, 168}, },
			{{-1, 103}, {141, 167}, },
			{{-1, 35}, },
			{{-1, 36}, {35, 71}, },
			{{-1, 136}, {0, 37}, {8, 51}, {35, 72}, {36, 74}, {71, 111}, {87, 124}, {125, 155}, {171, 186}, {187, 186}, },
			{{-1, 133}, },
			{{-1, 176}, },
			{{-1, 143}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'print', 'println', 'true', 'false', 'if', 'return', 'struct', 'do', 'var', 'while', 'for', 'int', 'bool', 'string', 'void', 'frameAdvance', 'walk', 'moveCam', '-', '++', '--', '(', ident, string, integer, EOF",
			"expecting: 'true', 'false', 'struct', '-', '++', '--', '(', ident, string, integer",
			"expecting: ';'",
			"expecting: 'then', 'do', ';', '+', '-', '*', '%', '<', '>', '==', ',', '.', ')'",
			"expecting: 'true', 'false', 'struct', ';', '-', '++', '--', '(', ident, string, integer",
			"expecting: ident",
			"expecting: 'print', 'println', 'true', 'false', 'if', 'end', 'return', 'struct', 'do', 'var', 'while', 'for', 'frameAdvance', 'walk', 'moveCam', '-', '++', '--', '(', ident, string, integer",
			"expecting: '('",
			"expecting: integer",
			"expecting: '=', '++', '--', '.', '('",
			"expecting: EOF",
			"expecting: 'print', 'println', 'true', 'false', 'if', 'else', 'end', 'return', 'struct', 'do', 'var', 'while', 'for', 'frameAdvance', 'walk', 'moveCam', '-', '++', '--', '(', ident, string, integer, EOF",
			"expecting: '.'",
			"expecting: ';', '.', ')'",
			"expecting: 'print', 'println', 'true', 'false', 'if', 'return', 'struct', 'do', 'var', 'while', 'for', 'frameAdvance', 'walk', 'moveCam', '-', '++', '--', '(', ident, string, integer, EOF",
			"expecting: 'then', 'do', ';', '+', '-', '*', '++', '--', '%', '<', '>', '==', ',', '.', '(', ')'",
			"expecting: ';', '<', '>', '=='",
			"expecting: 'then', 'do', ';', '+', '-', '<', '>', '==', ',', ')'",
			"expecting: 'then', 'do', ';', '+', '-', '*', '%', '<', '>', '==', ',', ')'",
			"expecting: 'then', '<', '>', '=='",
			"expecting: '(', ident",
			"expecting: '='",
			"expecting: 'do', '<', '>', '=='",
			"expecting: 'true', 'false', 'struct', 'var', ';', '-', '++', '--', '(', ident, string, integer",
			"expecting: '<', '>', '==', ')'",
			"expecting: 'true', 'false', 'struct', '-', '++', '--', '(', ')', ident, string, integer",
			"expecting: 'true', 'false', 'struct', '=', '-', '++', '--', '(', ident, string, integer",
			"expecting: 'print', 'println', 'true', 'false', 'if', 'else', 'end', 'return', 'struct', 'do', 'var', 'while', 'for', 'frameAdvance', 'walk', 'moveCam', '-', '++', '--', '(', ident, string, integer",
			"expecting: 'else', 'end'",
			"expecting: 'end', ','",
			"expecting: 'end'",
			"expecting: '<', '>', '==', ',', ')'",
			"expecting: ')'",
			"expecting: ',', ')'",
			"expecting: ';', '<', '>', '==', ')'",
			"expecting: ';', '.'",
			"expecting: 'int', 'bool', 'string', 'void', ')'",
			"expecting: '=', '.'",
			"expecting: 'true', 'false', 'struct', 'var', '-', '++', '--', '(', ')', ident, string, integer",
			"expecting: 'do'",
			"expecting: 'int', 'bool', 'string', 'void'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 3, 1, 4, 5, 6, 5, 1, 7, 5, 5, 5, 5, 4, 7, 7, 8, 5, 5, 1, 9, 3, 3, 10, 0, 5, 0, 11, 2, 12, 3, 13, 0, 0, 14, 5, 15, 16, 17, 18, 3, 3, 11, 19, 11, 16, 20, 11, 6, 21, 22, 23, 11, 16, 1, 1, 3, 3, 3, 24, 1, 3, 3, 25, 7, 11, 5, 0, 0, 14, 0, 14, 11, 7, 25, 11, 26, 26, 1, 1, 1, 1, 1, 5, 27, 28, 11, 25, 29, 30, 29, 11, 1, 6, 4, 9, 2, 11, 31, 32, 33, 32, 3, 34, 35, 32, 36, 37, 14, 3, 32, 1, 17, 1, 17, 17, 18, 18, 3, 3, 3, 27, 6, 11, 30, 3, 32, 0, 5, 29, 29, 34, 30, 6, 38, 16, 4, 2, 1, 33, 33, 2, 11, 35, 39, 5, 32, 33, 1, 3, 17, 17, 6, 11, 3, 29, 29, 11, 39, 32, 38, 38, 16, 11, 33, 33, 11, 11, 6, 33, 39, 40, 33, 33, 34, 6, 39, 39, 32, 39, 32, 38, 30, 6, 6, 33, 33, 30, 6, 6, 39, 6, 39, 39, 32, 0, 30, 11, 30, 30, 6, 30, 6, 6, 39, 0, 11, 11, 30, 11, 30, 30, 6, 11, 11, 11, 30, 11, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
