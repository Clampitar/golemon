/* This file was generated by SableCC (http://www.sablecc.org/). */

package gdx.game.Scene.node;

import gdx.game.Scene.analysis.*;

@SuppressWarnings("nls")
public final class AIncrementAssigner extends PAssigner
{
    private PIncrement _increment_;

    public AIncrementAssigner()
    {
        // Constructor
    }

    public AIncrementAssigner(
        @SuppressWarnings("hiding") PIncrement _increment_)
    {
        // Constructor
        setIncrement(_increment_);

    }

    @Override
    public Object clone()
    {
        return new AIncrementAssigner(
            cloneNode(this._increment_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIncrementAssigner(this);
    }

    public PIncrement getIncrement()
    {
        return this._increment_;
    }

    public void setIncrement(PIncrement node)
    {
        if(this._increment_ != null)
        {
            this._increment_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._increment_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._increment_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._increment_ == child)
        {
            this._increment_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._increment_ == oldChild)
        {
            setIncrement((PIncrement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
