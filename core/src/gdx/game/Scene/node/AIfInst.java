/* This file was generated by SableCC (http://www.sablecc.org/). */

package gdx.game.Scene.node;

import gdx.game.Scene.analysis.*;

@SuppressWarnings("nls")
public final class AIfInst extends PInst
{
    private TIf _if_;
    private PExp _exp_;
    private PThenPart _thenPart_;
    private PElsePart _elsePart_;
    private TEnd _end_;

    public AIfInst()
    {
        // Constructor
    }

    public AIfInst(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") PThenPart _thenPart_,
        @SuppressWarnings("hiding") PElsePart _elsePart_,
        @SuppressWarnings("hiding") TEnd _end_)
    {
        // Constructor
        setIf(_if_);

        setExp(_exp_);

        setThenPart(_thenPart_);

        setElsePart(_elsePart_);

        setEnd(_end_);

    }

    @Override
    public Object clone()
    {
        return new AIfInst(
            cloneNode(this._if_),
            cloneNode(this._exp_),
            cloneNode(this._thenPart_),
            cloneNode(this._elsePart_),
            cloneNode(this._end_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfInst(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public PThenPart getThenPart()
    {
        return this._thenPart_;
    }

    public void setThenPart(PThenPart node)
    {
        if(this._thenPart_ != null)
        {
            this._thenPart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._thenPart_ = node;
    }

    public PElsePart getElsePart()
    {
        return this._elsePart_;
    }

    public void setElsePart(PElsePart node)
    {
        if(this._elsePart_ != null)
        {
            this._elsePart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elsePart_ = node;
    }

    public TEnd getEnd()
    {
        return this._end_;
    }

    public void setEnd(TEnd node)
    {
        if(this._end_ != null)
        {
            this._end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._end_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._exp_)
            + toString(this._thenPart_)
            + toString(this._elsePart_)
            + toString(this._end_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._thenPart_ == child)
        {
            this._thenPart_ = null;
            return;
        }

        if(this._elsePart_ == child)
        {
            this._elsePart_ = null;
            return;
        }

        if(this._end_ == child)
        {
            this._end_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._thenPart_ == oldChild)
        {
            setThenPart((PThenPart) newChild);
            return;
        }

        if(this._elsePart_ == oldChild)
        {
            setElsePart((PElsePart) newChild);
            return;
        }

        if(this._end_ == oldChild)
        {
            setEnd((TEnd) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
