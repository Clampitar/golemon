/* This file was generated by SableCC (http://www.sablecc.org/). */

package gdx.game.Interp.analysis;

import gdx.game.Interp.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProg(AProg node);
    void caseAStructDecl(AStructDecl node);
    void caseAFields(AFields node);
    void caseAAdditionalField(AAdditionalField node);
    void caseAField(AField node);
    void caseAIntType(AIntType node);
    void caseABoolType(ABoolType node);
    void caseAStringType(AStringType node);
    void caseAVoidType(AVoidType node);
    void caseAFunDecl(AFunDecl node);
    void caseAFunBody(AFunBody node);
    void caseAAssignerInst(AAssignerInst node);
    void caseAIfInst(AIfInst node);
    void caseABlockInst(ABlockInst node);
    void caseAWhileInst(AWhileInst node);
    void caseAForInst(AForInst node);
    void caseAReturnInst(AReturnInst node);
    void caseAFunCallInst(AFunCallInst node);
    void caseAPrintExpInst(APrintExpInst node);
    void caseAPrintlnInst(APrintlnInst node);
    void caseASayInst(ASayInst node);
    void caseAFrameAdvanceInst(AFrameAdvanceInst node);
    void caseAWalkInst(AWalkInst node);
    void caseAMoveCamInst(AMoveCamInst node);
    void caseADeclAssigner(ADeclAssigner node);
    void caseAAssignAssigner(AAssignAssigner node);
    void caseAFieldAssignAssigner(AFieldAssignAssigner node);
    void caseAIncrementAssigner(AIncrementAssigner node);
    void caseAWhileBody(AWhileBody node);
    void caseAThenPart(AThenPart node);
    void caseAElsePart(AElsePart node);
    void caseAEqExp(AEqExp node);
    void caseALtExp(ALtExp node);
    void caseAGtExp(AGtExp node);
    void caseALeExp(ALeExp node);
    void caseAGeExp(AGeExp node);
    void caseASimpleExp(ASimpleExp node);
    void caseAAddAdditiveExp(AAddAdditiveExp node);
    void caseASubAdditiveExp(ASubAdditiveExp node);
    void caseASimpleAdditiveExp(ASimpleAdditiveExp node);
    void caseAMultMultExp(AMultMultExp node);
    void caseAModuloMultExp(AModuloMultExp node);
    void caseASimpleMultExp(ASimpleMultExp node);
    void caseAFieldAccessUnary(AFieldAccessUnary node);
    void caseASimpleUnary(ASimpleUnary node);
    void caseATrueTerm(ATrueTerm node);
    void caseAFalseTerm(AFalseTerm node);
    void caseAIntegerTerm(AIntegerTerm node);
    void caseAStringTerm(AStringTerm node);
    void caseAVarTerm(AVarTerm node);
    void caseAParTerm(AParTerm node);
    void caseAFunCallTerm(AFunCallTerm node);
    void caseAStructTerm(AStructTerm node);
    void caseAIncrementTerm(AIncrementTerm node);
    void caseAPreAddIncrement(APreAddIncrement node);
    void caseAPostAddIncrement(APostAddIncrement node);
    void caseAPreSubIncrement(APreSubIncrement node);
    void caseAPostSubIncrement(APostSubIncrement node);
    void caseAParams(AParams node);
    void caseAAdditionalParam(AAdditionalParam node);
    void caseAParam(AParam node);
    void caseAArgs(AArgs node);
    void caseAAdditionalArg(AAdditionalArg node);
    void caseAArg(AArg node);

    void caseTPrint(TPrint node);
    void caseTPrintln(TPrintln node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTIf(TIf node);
    void caseTThen(TThen node);
    void caseTElse(TElse node);
    void caseTEnd(TEnd node);
    void caseTReturn(TReturn node);
    void caseTStruct(TStruct node);
    void caseTDo(TDo node);
    void caseTVar(TVar node);
    void caseTWhile(TWhile node);
    void caseTFor(TFor node);
    void caseTIntType(TIntType node);
    void caseTBoolType(TBoolType node);
    void caseTStringType(TStringType node);
    void caseTVoidType(TVoidType node);
    void caseTSay(TSay node);
    void caseTFrameAdvance(TFrameAdvance node);
    void caseTWalk(TWalk node);
    void caseTMoveCam(TMoveCam node);
    void caseTSc(TSc node);
    void caseTAssign(TAssign node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTPlusInc(TPlusInc node);
    void caseTMinusInc(TMinusInc node);
    void caseTModulo(TModulo node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTEq(TEq node);
    void caseTComma(TComma node);
    void caseTDot(TDot node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTIdent(TIdent node);
    void caseTString(TString node);
    void caseTInteger(TInteger node);
    void caseTFloat(TFloat node);
    void caseTBlank(TBlank node);
    void caseTComment(TComment node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
