/* This file was generated by SableCC (http://www.sablecc.org/). */

package gdx.game.Interp.analysis;

import java.util.*;
import gdx.game.Interp.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProg().apply(this);
        outStart(node);
    }

    public void inAProg(AProg node)
    {
        defaultIn(node);
    }

    public void outAProg(AProg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProg(AProg node)
    {
        inAProg(node);
        {
            List<PInst> copy = new ArrayList<PInst>(node.getInsts());
            Collections.reverse(copy);
            for(PInst e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PFunDecl> copy = new ArrayList<PFunDecl>(node.getFunDecls());
            Collections.reverse(copy);
            for(PFunDecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PStructDecl> copy = new ArrayList<PStructDecl>(node.getStructDecls());
            Collections.reverse(copy);
            for(PStructDecl e : copy)
            {
                e.apply(this);
            }
        }
        outAProg(node);
    }

    public void inAStructDecl(AStructDecl node)
    {
        defaultIn(node);
    }

    public void outAStructDecl(AStructDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructDecl(AStructDecl node)
    {
        inAStructDecl(node);
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getFields() != null)
        {
            node.getFields().apply(this);
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        if(node.getStruct() != null)
        {
            node.getStruct().apply(this);
        }
        outAStructDecl(node);
    }

    public void inAFields(AFields node)
    {
        defaultIn(node);
    }

    public void outAFields(AFields node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFields(AFields node)
    {
        inAFields(node);
        {
            List<PAdditionalField> copy = new ArrayList<PAdditionalField>(node.getAdditionalFields());
            Collections.reverse(copy);
            for(PAdditionalField e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getField() != null)
        {
            node.getField().apply(this);
        }
        outAFields(node);
    }

    public void inAAdditionalField(AAdditionalField node)
    {
        defaultIn(node);
    }

    public void outAAdditionalField(AAdditionalField node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditionalField(AAdditionalField node)
    {
        inAAdditionalField(node);
        if(node.getField() != null)
        {
            node.getField().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAAdditionalField(node);
    }

    public void inAField(AField node)
    {
        defaultIn(node);
    }

    public void outAField(AField node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAField(AField node)
    {
        inAField(node);
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outAField(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getIntType() != null)
        {
            node.getIntType().apply(this);
        }
        outAIntType(node);
    }

    public void inABoolType(ABoolType node)
    {
        defaultIn(node);
    }

    public void outABoolType(ABoolType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolType(ABoolType node)
    {
        inABoolType(node);
        if(node.getBoolType() != null)
        {
            node.getBoolType().apply(this);
        }
        outABoolType(node);
    }

    public void inAStringType(AStringType node)
    {
        defaultIn(node);
    }

    public void outAStringType(AStringType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringType(AStringType node)
    {
        inAStringType(node);
        if(node.getStringType() != null)
        {
            node.getStringType().apply(this);
        }
        outAStringType(node);
    }

    public void inAFunDecl(AFunDecl node)
    {
        defaultIn(node);
    }

    public void outAFunDecl(AFunDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunDecl(AFunDecl node)
    {
        inAFunDecl(node);
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getFunBody() != null)
        {
            node.getFunBody().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getParams() != null)
        {
            node.getParams().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAFunDecl(node);
    }

    public void inAFunBody(AFunBody node)
    {
        defaultIn(node);
    }

    public void outAFunBody(AFunBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunBody(AFunBody node)
    {
        inAFunBody(node);
        {
            List<PInst> copy = new ArrayList<PInst>(node.getInsts());
            Collections.reverse(copy);
            for(PInst e : copy)
            {
                e.apply(this);
            }
        }
        outAFunBody(node);
    }

    public void inAAssignerInst(AAssignerInst node)
    {
        defaultIn(node);
    }

    public void outAAssignerInst(AAssignerInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignerInst(AAssignerInst node)
    {
        inAAssignerInst(node);
        if(node.getSc() != null)
        {
            node.getSc().apply(this);
        }
        if(node.getAssigner() != null)
        {
            node.getAssigner().apply(this);
        }
        outAAssignerInst(node);
    }

    public void inAIfInst(AIfInst node)
    {
        defaultIn(node);
    }

    public void outAIfInst(AIfInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfInst(AIfInst node)
    {
        inAIfInst(node);
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getElsePart() != null)
        {
            node.getElsePart().apply(this);
        }
        if(node.getThenPart() != null)
        {
            node.getThenPart().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfInst(node);
    }

    public void inABlockInst(ABlockInst node)
    {
        defaultIn(node);
    }

    public void outABlockInst(ABlockInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockInst(ABlockInst node)
    {
        inABlockInst(node);
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        {
            List<PInst> copy = new ArrayList<PInst>(node.getInsts());
            Collections.reverse(copy);
            for(PInst e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        outABlockInst(node);
    }

    public void inAWhileInst(AWhileInst node)
    {
        defaultIn(node);
    }

    public void outAWhileInst(AWhileInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileInst(AWhileInst node)
    {
        inAWhileInst(node);
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getWhileBody() != null)
        {
            node.getWhileBody().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAWhileInst(node);
    }

    public void inAForInst(AForInst node)
    {
        defaultIn(node);
    }

    public void outAForInst(AForInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForInst(AForInst node)
    {
        inAForInst(node);
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getWhileBody() != null)
        {
            node.getWhileBody().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getIter() != null)
        {
            node.getIter().apply(this);
        }
        if(node.getSecondSc() != null)
        {
            node.getSecondSc().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getFirstSc() != null)
        {
            node.getFirstSc().apply(this);
        }
        if(node.getDecl() != null)
        {
            node.getDecl().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        outAForInst(node);
    }

    public void inAReturnInst(AReturnInst node)
    {
        defaultIn(node);
    }

    public void outAReturnInst(AReturnInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnInst(AReturnInst node)
    {
        inAReturnInst(node);
        if(node.getSc() != null)
        {
            node.getSc().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAReturnInst(node);
    }

    public void inAFunCallInst(AFunCallInst node)
    {
        defaultIn(node);
    }

    public void outAFunCallInst(AFunCallInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunCallInst(AFunCallInst node)
    {
        inAFunCallInst(node);
        if(node.getSc() != null)
        {
            node.getSc().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outAFunCallInst(node);
    }

    public void inAPrintExpInst(APrintExpInst node)
    {
        defaultIn(node);
    }

    public void outAPrintExpInst(APrintExpInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintExpInst(APrintExpInst node)
    {
        inAPrintExpInst(node);
        if(node.getSc() != null)
        {
            node.getSc().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        outAPrintExpInst(node);
    }

    public void inAPrintlnInst(APrintlnInst node)
    {
        defaultIn(node);
    }

    public void outAPrintlnInst(APrintlnInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintlnInst(APrintlnInst node)
    {
        inAPrintlnInst(node);
        if(node.getSc() != null)
        {
            node.getSc().apply(this);
        }
        if(node.getPrintln() != null)
        {
            node.getPrintln().apply(this);
        }
        outAPrintlnInst(node);
    }

    public void inAFrameAdvanceInst(AFrameAdvanceInst node)
    {
        defaultIn(node);
    }

    public void outAFrameAdvanceInst(AFrameAdvanceInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFrameAdvanceInst(AFrameAdvanceInst node)
    {
        inAFrameAdvanceInst(node);
        if(node.getSc() != null)
        {
            node.getSc().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFrameAdvance() != null)
        {
            node.getFrameAdvance().apply(this);
        }
        outAFrameAdvanceInst(node);
    }

    public void inAWalkInst(AWalkInst node)
    {
        defaultIn(node);
    }

    public void outAWalkInst(AWalkInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWalkInst(AWalkInst node)
    {
        inAWalkInst(node);
        if(node.getSc() != null)
        {
            node.getSc().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getWalk() != null)
        {
            node.getWalk().apply(this);
        }
        outAWalkInst(node);
    }

    public void inADeclAssigner(ADeclAssigner node)
    {
        defaultIn(node);
    }

    public void outADeclAssigner(ADeclAssigner node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclAssigner(ADeclAssigner node)
    {
        inADeclAssigner(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outADeclAssigner(node);
    }

    public void inAAssignAssigner(AAssignAssigner node)
    {
        defaultIn(node);
    }

    public void outAAssignAssigner(AAssignAssigner node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignAssigner(AAssignAssigner node)
    {
        inAAssignAssigner(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outAAssignAssigner(node);
    }

    public void inAFieldAssignAssigner(AFieldAssignAssigner node)
    {
        defaultIn(node);
    }

    public void outAFieldAssignAssigner(AFieldAssignAssigner node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldAssignAssigner(AFieldAssignAssigner node)
    {
        inAFieldAssignAssigner(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAFieldAssignAssigner(node);
    }

    public void inAWhileBody(AWhileBody node)
    {
        defaultIn(node);
    }

    public void outAWhileBody(AWhileBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileBody(AWhileBody node)
    {
        inAWhileBody(node);
        {
            List<PInst> copy = new ArrayList<PInst>(node.getInsts());
            Collections.reverse(copy);
            for(PInst e : copy)
            {
                e.apply(this);
            }
        }
        outAWhileBody(node);
    }

    public void inAThenPart(AThenPart node)
    {
        defaultIn(node);
    }

    public void outAThenPart(AThenPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThenPart(AThenPart node)
    {
        inAThenPart(node);
        {
            List<PInst> copy = new ArrayList<PInst>(node.getInsts());
            Collections.reverse(copy);
            for(PInst e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        outAThenPart(node);
    }

    public void inAElsePart(AElsePart node)
    {
        defaultIn(node);
    }

    public void outAElsePart(AElsePart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElsePart(AElsePart node)
    {
        inAElsePart(node);
        {
            List<PInst> copy = new ArrayList<PInst>(node.getInsts());
            Collections.reverse(copy);
            for(PInst e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAElsePart(node);
    }

    public void inAEqExp(AEqExp node)
    {
        defaultIn(node);
    }

    public void outAEqExp(AEqExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqExp(AEqExp node)
    {
        inAEqExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAEqExp(node);
    }

    public void inALtExp(ALtExp node)
    {
        defaultIn(node);
    }

    public void outALtExp(ALtExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtExp(ALtExp node)
    {
        inALtExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALtExp(node);
    }

    public void inAGtExp(AGtExp node)
    {
        defaultIn(node);
    }

    public void outAGtExp(AGtExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtExp(AGtExp node)
    {
        inAGtExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAGtExp(node);
    }

    public void inASimpleExp(ASimpleExp node)
    {
        defaultIn(node);
    }

    public void outASimpleExp(ASimpleExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleExp(ASimpleExp node)
    {
        inASimpleExp(node);
        if(node.getAdditiveExp() != null)
        {
            node.getAdditiveExp().apply(this);
        }
        outASimpleExp(node);
    }

    public void inAAddAdditiveExp(AAddAdditiveExp node)
    {
        defaultIn(node);
    }

    public void outAAddAdditiveExp(AAddAdditiveExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddAdditiveExp(AAddAdditiveExp node)
    {
        inAAddAdditiveExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAddAdditiveExp(node);
    }

    public void inASubAdditiveExp(ASubAdditiveExp node)
    {
        defaultIn(node);
    }

    public void outASubAdditiveExp(ASubAdditiveExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubAdditiveExp(ASubAdditiveExp node)
    {
        inASubAdditiveExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outASubAdditiveExp(node);
    }

    public void inASimpleAdditiveExp(ASimpleAdditiveExp node)
    {
        defaultIn(node);
    }

    public void outASimpleAdditiveExp(ASimpleAdditiveExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleAdditiveExp(ASimpleAdditiveExp node)
    {
        inASimpleAdditiveExp(node);
        if(node.getMultExp() != null)
        {
            node.getMultExp().apply(this);
        }
        outASimpleAdditiveExp(node);
    }

    public void inAMultMultExp(AMultMultExp node)
    {
        defaultIn(node);
    }

    public void outAMultMultExp(AMultMultExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultMultExp(AMultMultExp node)
    {
        inAMultMultExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMultMultExp(node);
    }

    public void inAModuloMultExp(AModuloMultExp node)
    {
        defaultIn(node);
    }

    public void outAModuloMultExp(AModuloMultExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModuloMultExp(AModuloMultExp node)
    {
        inAModuloMultExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getModulo() != null)
        {
            node.getModulo().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAModuloMultExp(node);
    }

    public void inASimpleMultExp(ASimpleMultExp node)
    {
        defaultIn(node);
    }

    public void outASimpleMultExp(ASimpleMultExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleMultExp(ASimpleMultExp node)
    {
        inASimpleMultExp(node);
        if(node.getUnary() != null)
        {
            node.getUnary().apply(this);
        }
        outASimpleMultExp(node);
    }

    public void inAFieldAccessUnary(AFieldAccessUnary node)
    {
        defaultIn(node);
    }

    public void outAFieldAccessUnary(AFieldAccessUnary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldAccessUnary(AFieldAccessUnary node)
    {
        inAFieldAccessUnary(node);
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAFieldAccessUnary(node);
    }

    public void inASimpleUnary(ASimpleUnary node)
    {
        defaultIn(node);
    }

    public void outASimpleUnary(ASimpleUnary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleUnary(ASimpleUnary node)
    {
        inASimpleUnary(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outASimpleUnary(node);
    }

    public void inATrueTerm(ATrueTerm node)
    {
        defaultIn(node);
    }

    public void outATrueTerm(ATrueTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueTerm(ATrueTerm node)
    {
        inATrueTerm(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueTerm(node);
    }

    public void inAFalseTerm(AFalseTerm node)
    {
        defaultIn(node);
    }

    public void outAFalseTerm(AFalseTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseTerm(AFalseTerm node)
    {
        inAFalseTerm(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseTerm(node);
    }

    public void inAIntegerTerm(AIntegerTerm node)
    {
        defaultIn(node);
    }

    public void outAIntegerTerm(AIntegerTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerTerm(AIntegerTerm node)
    {
        inAIntegerTerm(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntegerTerm(node);
    }

    public void inAStringTerm(AStringTerm node)
    {
        defaultIn(node);
    }

    public void outAStringTerm(AStringTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringTerm(AStringTerm node)
    {
        inAStringTerm(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringTerm(node);
    }

    public void inAVarTerm(AVarTerm node)
    {
        defaultIn(node);
    }

    public void outAVarTerm(AVarTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarTerm(AVarTerm node)
    {
        inAVarTerm(node);
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outAVarTerm(node);
    }

    public void inAParTerm(AParTerm node)
    {
        defaultIn(node);
    }

    public void outAParTerm(AParTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParTerm(AParTerm node)
    {
        inAParTerm(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAParTerm(node);
    }

    public void inAFunCallTerm(AFunCallTerm node)
    {
        defaultIn(node);
    }

    public void outAFunCallTerm(AFunCallTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunCallTerm(AFunCallTerm node)
    {
        inAFunCallTerm(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outAFunCallTerm(node);
    }

    public void inAStructTerm(AStructTerm node)
    {
        defaultIn(node);
    }

    public void outAStructTerm(AStructTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStructTerm(AStructTerm node)
    {
        inAStructTerm(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        if(node.getStruct() != null)
        {
            node.getStruct().apply(this);
        }
        outAStructTerm(node);
    }

    public void inAParams(AParams node)
    {
        defaultIn(node);
    }

    public void outAParams(AParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParams(AParams node)
    {
        inAParams(node);
        {
            List<PAdditionalParam> copy = new ArrayList<PAdditionalParam>(node.getAdditionalParams());
            Collections.reverse(copy);
            for(PAdditionalParam e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParam() != null)
        {
            node.getParam().apply(this);
        }
        outAParams(node);
    }

    public void inAAdditionalParam(AAdditionalParam node)
    {
        defaultIn(node);
    }

    public void outAAdditionalParam(AAdditionalParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditionalParam(AAdditionalParam node)
    {
        inAAdditionalParam(node);
        if(node.getParam() != null)
        {
            node.getParam().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAAdditionalParam(node);
    }

    public void inAParam(AParam node)
    {
        defaultIn(node);
    }

    public void outAParam(AParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParam(AParam node)
    {
        inAParam(node);
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAParam(node);
    }

    public void inAArgs(AArgs node)
    {
        defaultIn(node);
    }

    public void outAArgs(AArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgs(AArgs node)
    {
        inAArgs(node);
        {
            List<PAdditionalArg> copy = new ArrayList<PAdditionalArg>(node.getAdditionalArgs());
            Collections.reverse(copy);
            for(PAdditionalArg e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        outAArgs(node);
    }

    public void inAAdditionalArg(AAdditionalArg node)
    {
        defaultIn(node);
    }

    public void outAAdditionalArg(AAdditionalArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditionalArg(AAdditionalArg node)
    {
        inAAdditionalArg(node);
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAAdditionalArg(node);
    }

    public void inAArg(AArg node)
    {
        defaultIn(node);
    }

    public void outAArg(AArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArg(AArg node)
    {
        inAArg(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAArg(node);
    }
}
