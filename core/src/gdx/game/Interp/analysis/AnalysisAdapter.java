/* This file was generated by SableCC (http://www.sablecc.org/). */

package gdx.game.Interp.analysis;

import java.util.*;
import gdx.game.Interp.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProg(AProg node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStructDecl(AStructDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFields(AFields node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAdditionalField(AAdditionalField node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAField(AField node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABoolType(ABoolType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringType(AStringType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVoidType(AVoidType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunDecl(AFunDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunBody(AFunBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignerInst(AAssignerInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfInst(AIfInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlockInst(ABlockInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileInst(AWhileInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForInst(AForInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnInst(AReturnInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunCallInst(AFunCallInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrintExpInst(APrintExpInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrintlnInst(APrintlnInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASayInst(ASayInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFrameAdvanceInst(AFrameAdvanceInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWalkInst(AWalkInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMoveCamInst(AMoveCamInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclAssigner(ADeclAssigner node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignAssigner(AAssignAssigner node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFieldAssignAssigner(AFieldAssignAssigner node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIncrementAssigner(AIncrementAssigner node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileBody(AWhileBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAThenPart(AThenPart node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElsePart(AElsePart node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqExp(AEqExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALtExp(ALtExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGtExp(AGtExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALeExp(ALeExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGeExp(AGeExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleExp(ASimpleExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAddAdditiveExp(AAddAdditiveExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubAdditiveExp(ASubAdditiveExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleAdditiveExp(ASimpleAdditiveExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultMultExp(AMultMultExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModuloMultExp(AModuloMultExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleMultExp(ASimpleMultExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFieldAccessUnary(AFieldAccessUnary node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleUnary(ASimpleUnary node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATrueTerm(ATrueTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFalseTerm(AFalseTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntegerTerm(AIntegerTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringTerm(AStringTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarTerm(AVarTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParTerm(AParTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunCallTerm(AFunCallTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStructTerm(AStructTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIncrementTerm(AIncrementTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPreAddIncrement(APreAddIncrement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPostAddIncrement(APostAddIncrement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPreSubIncrement(APreSubIncrement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPostSubIncrement(APostSubIncrement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParams(AParams node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAdditionalParam(AAdditionalParam node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParam(AParam node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArgs(AArgs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAdditionalArg(AAdditionalArg node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArg(AArg node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPrint(TPrint node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPrintln(TPrintln node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEnd(TEnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStruct(TStruct node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVar(TVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntType(TIntType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBoolType(TBoolType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStringType(TStringType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVoidType(TVoidType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSay(TSay node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFrameAdvance(TFrameAdvance node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWalk(TWalk node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMoveCam(TMoveCam node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSc(TSc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlusInc(TPlusInc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinusInc(TMinusInc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTModulo(TModulo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdent(TIdent node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInteger(TInteger node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFloat(TFloat node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
