/* This file was generated by SableCC (http://www.sablecc.org/). */

package gdx.game.Interp.node;

import gdx.game.Interp.analysis.*;

@SuppressWarnings("nls")
public final class AWhileInst extends PInst
{
    private TWhile _while_;
    private PExp _exp_;
    private TDo _do_;
    private PWhileBody _whileBody_;
    private TEnd _end_;

    public AWhileInst()
    {
        // Constructor
    }

    public AWhileInst(
        @SuppressWarnings("hiding") TWhile _while_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TDo _do_,
        @SuppressWarnings("hiding") PWhileBody _whileBody_,
        @SuppressWarnings("hiding") TEnd _end_)
    {
        // Constructor
        setWhile(_while_);

        setExp(_exp_);

        setDo(_do_);

        setWhileBody(_whileBody_);

        setEnd(_end_);

    }

    @Override
    public Object clone()
    {
        return new AWhileInst(
            cloneNode(this._while_),
            cloneNode(this._exp_),
            cloneNode(this._do_),
            cloneNode(this._whileBody_),
            cloneNode(this._end_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWhileInst(this);
    }

    public TWhile getWhile()
    {
        return this._while_;
    }

    public void setWhile(TWhile node)
    {
        if(this._while_ != null)
        {
            this._while_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._while_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TDo getDo()
    {
        return this._do_;
    }

    public void setDo(TDo node)
    {
        if(this._do_ != null)
        {
            this._do_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._do_ = node;
    }

    public PWhileBody getWhileBody()
    {
        return this._whileBody_;
    }

    public void setWhileBody(PWhileBody node)
    {
        if(this._whileBody_ != null)
        {
            this._whileBody_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._whileBody_ = node;
    }

    public TEnd getEnd()
    {
        return this._end_;
    }

    public void setEnd(TEnd node)
    {
        if(this._end_ != null)
        {
            this._end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._end_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._while_)
            + toString(this._exp_)
            + toString(this._do_)
            + toString(this._whileBody_)
            + toString(this._end_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._while_ == child)
        {
            this._while_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._do_ == child)
        {
            this._do_ = null;
            return;
        }

        if(this._whileBody_ == child)
        {
            this._whileBody_ = null;
            return;
        }

        if(this._end_ == child)
        {
            this._end_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._while_ == oldChild)
        {
            setWhile((TWhile) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._do_ == oldChild)
        {
            setDo((TDo) newChild);
            return;
        }

        if(this._whileBody_ == oldChild)
        {
            setWhileBody((PWhileBody) newChild);
            return;
        }

        if(this._end_ == oldChild)
        {
            setEnd((TEnd) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
