/* This file was generated by SableCC (http://www.sablecc.org/). */

package gdx.game.Interp.node;

import gdx.game.Interp.analysis.*;

@SuppressWarnings("nls")
public final class AForInst extends PInst
{
    private TFor _for_;
    private PExp _decl_;
    private TSc _first_;
    private PExp _cond_;
    private TSc _second_;
    private PExp _iter_;
    private TDo _do_;
    private PWhileBody _whileBody_;
    private TEnd _end_;

    public AForInst()
    {
        // Constructor
    }

    public AForInst(
        @SuppressWarnings("hiding") TFor _for_,
        @SuppressWarnings("hiding") PExp _decl_,
        @SuppressWarnings("hiding") TSc _first_,
        @SuppressWarnings("hiding") PExp _cond_,
        @SuppressWarnings("hiding") TSc _second_,
        @SuppressWarnings("hiding") PExp _iter_,
        @SuppressWarnings("hiding") TDo _do_,
        @SuppressWarnings("hiding") PWhileBody _whileBody_,
        @SuppressWarnings("hiding") TEnd _end_)
    {
        // Constructor
        setFor(_for_);

        setDecl(_decl_);

        setFirst(_first_);

        setCond(_cond_);

        setSecond(_second_);

        setIter(_iter_);

        setDo(_do_);

        setWhileBody(_whileBody_);

        setEnd(_end_);

    }

    @Override
    public Object clone()
    {
        return new AForInst(
            cloneNode(this._for_),
            cloneNode(this._decl_),
            cloneNode(this._first_),
            cloneNode(this._cond_),
            cloneNode(this._second_),
            cloneNode(this._iter_),
            cloneNode(this._do_),
            cloneNode(this._whileBody_),
            cloneNode(this._end_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForInst(this);
    }

    public TFor getFor()
    {
        return this._for_;
    }

    public void setFor(TFor node)
    {
        if(this._for_ != null)
        {
            this._for_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._for_ = node;
    }

    public PExp getDecl()
    {
        return this._decl_;
    }

    public void setDecl(PExp node)
    {
        if(this._decl_ != null)
        {
            this._decl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._decl_ = node;
    }

    public TSc getFirst()
    {
        return this._first_;
    }

    public void setFirst(TSc node)
    {
        if(this._first_ != null)
        {
            this._first_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._first_ = node;
    }

    public PExp getCond()
    {
        return this._cond_;
    }

    public void setCond(PExp node)
    {
        if(this._cond_ != null)
        {
            this._cond_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cond_ = node;
    }

    public TSc getSecond()
    {
        return this._second_;
    }

    public void setSecond(TSc node)
    {
        if(this._second_ != null)
        {
            this._second_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._second_ = node;
    }

    public PExp getIter()
    {
        return this._iter_;
    }

    public void setIter(PExp node)
    {
        if(this._iter_ != null)
        {
            this._iter_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._iter_ = node;
    }

    public TDo getDo()
    {
        return this._do_;
    }

    public void setDo(TDo node)
    {
        if(this._do_ != null)
        {
            this._do_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._do_ = node;
    }

    public PWhileBody getWhileBody()
    {
        return this._whileBody_;
    }

    public void setWhileBody(PWhileBody node)
    {
        if(this._whileBody_ != null)
        {
            this._whileBody_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._whileBody_ = node;
    }

    public TEnd getEnd()
    {
        return this._end_;
    }

    public void setEnd(TEnd node)
    {
        if(this._end_ != null)
        {
            this._end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._end_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._for_)
            + toString(this._decl_)
            + toString(this._first_)
            + toString(this._cond_)
            + toString(this._second_)
            + toString(this._iter_)
            + toString(this._do_)
            + toString(this._whileBody_)
            + toString(this._end_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._for_ == child)
        {
            this._for_ = null;
            return;
        }

        if(this._decl_ == child)
        {
            this._decl_ = null;
            return;
        }

        if(this._first_ == child)
        {
            this._first_ = null;
            return;
        }

        if(this._cond_ == child)
        {
            this._cond_ = null;
            return;
        }

        if(this._second_ == child)
        {
            this._second_ = null;
            return;
        }

        if(this._iter_ == child)
        {
            this._iter_ = null;
            return;
        }

        if(this._do_ == child)
        {
            this._do_ = null;
            return;
        }

        if(this._whileBody_ == child)
        {
            this._whileBody_ = null;
            return;
        }

        if(this._end_ == child)
        {
            this._end_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._for_ == oldChild)
        {
            setFor((TFor) newChild);
            return;
        }

        if(this._decl_ == oldChild)
        {
            setDecl((PExp) newChild);
            return;
        }

        if(this._first_ == oldChild)
        {
            setFirst((TSc) newChild);
            return;
        }

        if(this._cond_ == oldChild)
        {
            setCond((PExp) newChild);
            return;
        }

        if(this._second_ == oldChild)
        {
            setSecond((TSc) newChild);
            return;
        }

        if(this._iter_ == oldChild)
        {
            setIter((PExp) newChild);
            return;
        }

        if(this._do_ == oldChild)
        {
            setDo((TDo) newChild);
            return;
        }

        if(this._whileBody_ == oldChild)
        {
            setWhileBody((PWhileBody) newChild);
            return;
        }

        if(this._end_ == oldChild)
        {
            setEnd((TEnd) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
