/* This file was generated by SableCC (http://www.sablecc.org/). */

package gdx.game.Interp.node;

import gdx.game.Interp.analysis.*;

@SuppressWarnings("nls")
public final class AForInst extends PInst
{
    private TFor _for_;
    private TLPar _lPar_;
    private PAssigner _decl_;
    private TSc _firstSc_;
    private PExp _cond_;
    private TSc _secondSc_;
    private PAssigner _iter_;
    private TRPar _rPar_;
    private TDo _do_;
    private PWhileBody _whileBody_;
    private TEnd _end_;

    public AForInst()
    {
        // Constructor
    }

    public AForInst(
        @SuppressWarnings("hiding") TFor _for_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PAssigner _decl_,
        @SuppressWarnings("hiding") TSc _firstSc_,
        @SuppressWarnings("hiding") PExp _cond_,
        @SuppressWarnings("hiding") TSc _secondSc_,
        @SuppressWarnings("hiding") PAssigner _iter_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") TDo _do_,
        @SuppressWarnings("hiding") PWhileBody _whileBody_,
        @SuppressWarnings("hiding") TEnd _end_)
    {
        // Constructor
        setFor(_for_);

        setLPar(_lPar_);

        setDecl(_decl_);

        setFirstSc(_firstSc_);

        setCond(_cond_);

        setSecondSc(_secondSc_);

        setIter(_iter_);

        setRPar(_rPar_);

        setDo(_do_);

        setWhileBody(_whileBody_);

        setEnd(_end_);

    }

    @Override
    public Object clone()
    {
        return new AForInst(
            cloneNode(this._for_),
            cloneNode(this._lPar_),
            cloneNode(this._decl_),
            cloneNode(this._firstSc_),
            cloneNode(this._cond_),
            cloneNode(this._secondSc_),
            cloneNode(this._iter_),
            cloneNode(this._rPar_),
            cloneNode(this._do_),
            cloneNode(this._whileBody_),
            cloneNode(this._end_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForInst(this);
    }

    public TFor getFor()
    {
        return this._for_;
    }

    public void setFor(TFor node)
    {
        if(this._for_ != null)
        {
            this._for_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._for_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PAssigner getDecl()
    {
        return this._decl_;
    }

    public void setDecl(PAssigner node)
    {
        if(this._decl_ != null)
        {
            this._decl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._decl_ = node;
    }

    public TSc getFirstSc()
    {
        return this._firstSc_;
    }

    public void setFirstSc(TSc node)
    {
        if(this._firstSc_ != null)
        {
            this._firstSc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._firstSc_ = node;
    }

    public PExp getCond()
    {
        return this._cond_;
    }

    public void setCond(PExp node)
    {
        if(this._cond_ != null)
        {
            this._cond_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cond_ = node;
    }

    public TSc getSecondSc()
    {
        return this._secondSc_;
    }

    public void setSecondSc(TSc node)
    {
        if(this._secondSc_ != null)
        {
            this._secondSc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._secondSc_ = node;
    }

    public PAssigner getIter()
    {
        return this._iter_;
    }

    public void setIter(PAssigner node)
    {
        if(this._iter_ != null)
        {
            this._iter_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._iter_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public TDo getDo()
    {
        return this._do_;
    }

    public void setDo(TDo node)
    {
        if(this._do_ != null)
        {
            this._do_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._do_ = node;
    }

    public PWhileBody getWhileBody()
    {
        return this._whileBody_;
    }

    public void setWhileBody(PWhileBody node)
    {
        if(this._whileBody_ != null)
        {
            this._whileBody_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._whileBody_ = node;
    }

    public TEnd getEnd()
    {
        return this._end_;
    }

    public void setEnd(TEnd node)
    {
        if(this._end_ != null)
        {
            this._end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._end_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._for_)
            + toString(this._lPar_)
            + toString(this._decl_)
            + toString(this._firstSc_)
            + toString(this._cond_)
            + toString(this._secondSc_)
            + toString(this._iter_)
            + toString(this._rPar_)
            + toString(this._do_)
            + toString(this._whileBody_)
            + toString(this._end_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._for_ == child)
        {
            this._for_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._decl_ == child)
        {
            this._decl_ = null;
            return;
        }

        if(this._firstSc_ == child)
        {
            this._firstSc_ = null;
            return;
        }

        if(this._cond_ == child)
        {
            this._cond_ = null;
            return;
        }

        if(this._secondSc_ == child)
        {
            this._secondSc_ = null;
            return;
        }

        if(this._iter_ == child)
        {
            this._iter_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._do_ == child)
        {
            this._do_ = null;
            return;
        }

        if(this._whileBody_ == child)
        {
            this._whileBody_ = null;
            return;
        }

        if(this._end_ == child)
        {
            this._end_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._for_ == oldChild)
        {
            setFor((TFor) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._decl_ == oldChild)
        {
            setDecl((PAssigner) newChild);
            return;
        }

        if(this._firstSc_ == oldChild)
        {
            setFirstSc((TSc) newChild);
            return;
        }

        if(this._cond_ == oldChild)
        {
            setCond((PExp) newChild);
            return;
        }

        if(this._secondSc_ == oldChild)
        {
            setSecondSc((TSc) newChild);
            return;
        }

        if(this._iter_ == oldChild)
        {
            setIter((PAssigner) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._do_ == oldChild)
        {
            setDo((TDo) newChild);
            return;
        }

        if(this._whileBody_ == oldChild)
        {
            setWhileBody((PWhileBody) newChild);
            return;
        }

        if(this._end_ == oldChild)
        {
            setEnd((TEnd) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
