/* This file was generated by SableCC (http://www.sablecc.org/). */

package gdx.game.Interp.node;

import gdx.game.Interp.analysis.*;

@SuppressWarnings("nls")
public final class AStructDecl extends PStructDecl
{
    private TStruct _struct_;
    private TIdent _ident_;
    private PFields _fields_;
    private TEnd _end_;

    public AStructDecl()
    {
        // Constructor
    }

    public AStructDecl(
        @SuppressWarnings("hiding") TStruct _struct_,
        @SuppressWarnings("hiding") TIdent _ident_,
        @SuppressWarnings("hiding") PFields _fields_,
        @SuppressWarnings("hiding") TEnd _end_)
    {
        // Constructor
        setStruct(_struct_);

        setIdent(_ident_);

        setFields(_fields_);

        setEnd(_end_);

    }

    @Override
    public Object clone()
    {
        return new AStructDecl(
            cloneNode(this._struct_),
            cloneNode(this._ident_),
            cloneNode(this._fields_),
            cloneNode(this._end_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStructDecl(this);
    }

    public TStruct getStruct()
    {
        return this._struct_;
    }

    public void setStruct(TStruct node)
    {
        if(this._struct_ != null)
        {
            this._struct_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._struct_ = node;
    }

    public TIdent getIdent()
    {
        return this._ident_;
    }

    public void setIdent(TIdent node)
    {
        if(this._ident_ != null)
        {
            this._ident_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ident_ = node;
    }

    public PFields getFields()
    {
        return this._fields_;
    }

    public void setFields(PFields node)
    {
        if(this._fields_ != null)
        {
            this._fields_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fields_ = node;
    }

    public TEnd getEnd()
    {
        return this._end_;
    }

    public void setEnd(TEnd node)
    {
        if(this._end_ != null)
        {
            this._end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._end_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._struct_)
            + toString(this._ident_)
            + toString(this._fields_)
            + toString(this._end_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._struct_ == child)
        {
            this._struct_ = null;
            return;
        }

        if(this._ident_ == child)
        {
            this._ident_ = null;
            return;
        }

        if(this._fields_ == child)
        {
            this._fields_ = null;
            return;
        }

        if(this._end_ == child)
        {
            this._end_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._struct_ == oldChild)
        {
            setStruct((TStruct) newChild);
            return;
        }

        if(this._ident_ == oldChild)
        {
            setIdent((TIdent) newChild);
            return;
        }

        if(this._fields_ == oldChild)
        {
            setFields((PFields) newChild);
            return;
        }

        if(this._end_ == oldChild)
        {
            setEnd((TEnd) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
