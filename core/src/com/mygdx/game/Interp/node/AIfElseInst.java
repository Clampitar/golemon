/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.mygdx.game.Interp.node;

import com.mygdx.game.Interp.analysis.*;

@SuppressWarnings("nls")
public final class AIfElseInst extends PInst
{
    private TIf _if_;
    private PExp _exp_;
    private TThen _then_;
    private PInst _thenInst_;
    private TElse _else_;
    private PInst _elseInst_;

    public AIfElseInst()
    {
        // Constructor
    }

    public AIfElseInst(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TThen _then_,
        @SuppressWarnings("hiding") PInst _thenInst_,
        @SuppressWarnings("hiding") TElse _else_,
        @SuppressWarnings("hiding") PInst _elseInst_)
    {
        // Constructor
        setIf(_if_);

        setExp(_exp_);

        setThen(_then_);

        setThenInst(_thenInst_);

        setElse(_else_);

        setElseInst(_elseInst_);

    }

    @Override
    public Object clone()
    {
        return new AIfElseInst(
            cloneNode(this._if_),
            cloneNode(this._exp_),
            cloneNode(this._then_),
            cloneNode(this._thenInst_),
            cloneNode(this._else_),
            cloneNode(this._elseInst_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfElseInst(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TThen getThen()
    {
        return this._then_;
    }

    public void setThen(TThen node)
    {
        if(this._then_ != null)
        {
            this._then_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._then_ = node;
    }

    public PInst getThenInst()
    {
        return this._thenInst_;
    }

    public void setThenInst(PInst node)
    {
        if(this._thenInst_ != null)
        {
            this._thenInst_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._thenInst_ = node;
    }

    public TElse getElse()
    {
        return this._else_;
    }

    public void setElse(TElse node)
    {
        if(this._else_ != null)
        {
            this._else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._else_ = node;
    }

    public PInst getElseInst()
    {
        return this._elseInst_;
    }

    public void setElseInst(PInst node)
    {
        if(this._elseInst_ != null)
        {
            this._elseInst_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elseInst_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._exp_)
            + toString(this._then_)
            + toString(this._thenInst_)
            + toString(this._else_)
            + toString(this._elseInst_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._then_ == child)
        {
            this._then_ = null;
            return;
        }

        if(this._thenInst_ == child)
        {
            this._thenInst_ = null;
            return;
        }

        if(this._else_ == child)
        {
            this._else_ = null;
            return;
        }

        if(this._elseInst_ == child)
        {
            this._elseInst_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._then_ == oldChild)
        {
            setThen((TThen) newChild);
            return;
        }

        if(this._thenInst_ == oldChild)
        {
            setThenInst((PInst) newChild);
            return;
        }

        if(this._else_ == oldChild)
        {
            setElse((TElse) newChild);
            return;
        }

        if(this._elseInst_ == oldChild)
        {
            setElseInst((PInst) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
