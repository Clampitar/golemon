/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.mygdx.game.Interp.node;

import java.util.*;
import com.mygdx.game.Interp.analysis.*;

@SuppressWarnings("nls")
public final class ABlockInst extends PInst
{
    private TLBr _lBr_;
    private final LinkedList<PInst> _insts_ = new LinkedList<PInst>();
    private TRBr _rBr_;
    private TSc _sc_;

    public ABlockInst()
    {
        // Constructor
    }

    public ABlockInst(
        @SuppressWarnings("hiding") TLBr _lBr_,
        @SuppressWarnings("hiding") List<?> _insts_,
        @SuppressWarnings("hiding") TRBr _rBr_,
        @SuppressWarnings("hiding") TSc _sc_)
    {
        // Constructor
        setLBr(_lBr_);

        setInsts(_insts_);

        setRBr(_rBr_);

        setSc(_sc_);

    }

    @Override
    public Object clone()
    {
        return new ABlockInst(
            cloneNode(this._lBr_),
            cloneList(this._insts_),
            cloneNode(this._rBr_),
            cloneNode(this._sc_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABlockInst(this);
    }

    public TLBr getLBr()
    {
        return this._lBr_;
    }

    public void setLBr(TLBr node)
    {
        if(this._lBr_ != null)
        {
            this._lBr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBr_ = node;
    }

    public LinkedList<PInst> getInsts()
    {
        return this._insts_;
    }

    public void setInsts(List<?> list)
    {
        for(PInst e : this._insts_)
        {
            e.parent(null);
        }
        this._insts_.clear();

        for(Object obj_e : list)
        {
            PInst e = (PInst) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._insts_.add(e);
        }
    }

    public TRBr getRBr()
    {
        return this._rBr_;
    }

    public void setRBr(TRBr node)
    {
        if(this._rBr_ != null)
        {
            this._rBr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBr_ = node;
    }

    public TSc getSc()
    {
        return this._sc_;
    }

    public void setSc(TSc node)
    {
        if(this._sc_ != null)
        {
            this._sc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sc_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lBr_)
            + toString(this._insts_)
            + toString(this._rBr_)
            + toString(this._sc_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lBr_ == child)
        {
            this._lBr_ = null;
            return;
        }

        if(this._insts_.remove(child))
        {
            return;
        }

        if(this._rBr_ == child)
        {
            this._rBr_ = null;
            return;
        }

        if(this._sc_ == child)
        {
            this._sc_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lBr_ == oldChild)
        {
            setLBr((TLBr) newChild);
            return;
        }

        for(ListIterator<PInst> i = this._insts_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PInst) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rBr_ == oldChild)
        {
            setRBr((TRBr) newChild);
            return;
        }

        if(this._sc_ == oldChild)
        {
            setSc((TSc) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
