/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.mygdx.game.Interp.parser;

import com.mygdx.game.Interp.lexer.*;
import com.mygdx.game.Interp.node.*;
import com.mygdx.game.Interp.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProg node1 = (PProg) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprog1Prog */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAprog2Prog */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce ADeclInst */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AAssignInst */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AIfElseInst */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce AAblockinst1Inst */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list, false);
            }
            break;
            case 6: /* reduce AAblockinst2Inst */
            {
                ArrayList<Object> list = new6();
                push(goTo(1), list, false);
            }
            break;
            case 7: /* reduce AWhileInst */
            {
                ArrayList<Object> list = new7();
                push(goTo(1), list, false);
            }
            break;
            case 8: /* reduce APrintExpInst */
            {
                ArrayList<Object> list = new8();
                push(goTo(1), list, false);
            }
            break;
            case 9: /* reduce APrintlnInst */
            {
                ArrayList<Object> list = new9();
                push(goTo(1), list, false);
            }
            break;
            case 10: /* reduce AEqExp */
            {
                ArrayList<Object> list = new10();
                push(goTo(2), list, false);
            }
            break;
            case 11: /* reduce ALtExp */
            {
                ArrayList<Object> list = new11();
                push(goTo(2), list, false);
            }
            break;
            case 12: /* reduce ASimpleExp */
            {
                ArrayList<Object> list = new12();
                push(goTo(2), list, false);
            }
            break;
            case 13: /* reduce AAddAdditiveExp */
            {
                ArrayList<Object> list = new13();
                push(goTo(3), list, false);
            }
            break;
            case 14: /* reduce ASubAdditiveExp */
            {
                ArrayList<Object> list = new14();
                push(goTo(3), list, false);
            }
            break;
            case 15: /* reduce ASimpleAdditiveExp */
            {
                ArrayList<Object> list = new15();
                push(goTo(3), list, false);
            }
            break;
            case 16: /* reduce ATrueTerm */
            {
                ArrayList<Object> list = new16();
                push(goTo(4), list, false);
            }
            break;
            case 17: /* reduce AFalseTerm */
            {
                ArrayList<Object> list = new17();
                push(goTo(4), list, false);
            }
            break;
            case 18: /* reduce ANumberTerm */
            {
                ArrayList<Object> list = new18();
                push(goTo(4), list, false);
            }
            break;
            case 19: /* reduce AStringTerm */
            {
                ArrayList<Object> list = new19();
                push(goTo(4), list, false);
            }
            break;
            case 20: /* reduce AVarTerm */
            {
                ArrayList<Object> list = new20();
                push(goTo(4), list, false);
            }
            break;
            case 21: /* reduce ATerminal$Inst */
            {
                ArrayList<Object> list = new21();
                push(goTo(5), list, true);
            }
            break;
            case 22: /* reduce ANonTerminal$Inst */
            {
                ArrayList<Object> list = new22();
                push(goTo(5), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprog1Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PProg pprogNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pprogNode1 = new AProg(listNode2);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprog2Prog */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pprogNode1 = new AProg(listNode3);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ADeclInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TVar tvarNode2;
        TIdent tidentNode3;
        TAssign tassignNode4;
        PExp pexpNode5;
        TSc tscNode6;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);
        tassignNode4 = (TAssign)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        tscNode6 = (TSc)nodeArrayList5.get(0);

        pinstNode1 = new ADeclInst(tvarNode2, tidentNode3, tassignNode4, pexpNode5, tscNode6);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAssignInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TIdent tidentNode2;
        TAssign tassignNode3;
        PExp pexpNode4;
        TSc tscNode5;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tscNode5 = (TSc)nodeArrayList4.get(0);

        pinstNode1 = new AAssignInst(tidentNode2, tassignNode3, pexpNode4, tscNode5);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AIfElseInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TIf tifNode2;
        PExp pexpNode3;
        TThen tthenNode4;
        PInst pinstNode5;
        TElse telseNode6;
        PInst pinstNode7;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pinstNode5 = (PInst)nodeArrayList4.get(0);
        telseNode6 = (TElse)nodeArrayList5.get(0);
        pinstNode7 = (PInst)nodeArrayList6.get(0);

        pinstNode1 = new AIfElseInst(tifNode2, pexpNode3, tthenNode4, pinstNode5, telseNode6, pinstNode7);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAblockinst1Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TDo tdoNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TEnd tendNode4;
        tdoNode2 = (TDo)nodeArrayList1.get(0);
        {
            // Block
        }
        tendNode4 = (TEnd)nodeArrayList2.get(0);

        pinstNode1 = new ABlockInst(tdoNode2, listNode3, tendNode4);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAblockinst2Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TDo tdoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TEnd tendNode5;
        tdoNode2 = (TDo)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tendNode5 = (TEnd)nodeArrayList3.get(0);

        pinstNode1 = new ABlockInst(tdoNode2, listNode4, tendNode5);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AWhileInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TWhile twhileNode2;
        PExp pexpNode3;
        TDo tdoNode4;
        PInst pinstNode5;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tdoNode4 = (TDo)nodeArrayList3.get(0);
        pinstNode5 = (PInst)nodeArrayList4.get(0);

        pinstNode1 = new AWhileInst(twhileNode2, pexpNode3, tdoNode4, pinstNode5);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce APrintExpInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TPrint tprintNode2;
        PExp pexpNode3;
        TSc tscNode4;
        tprintNode2 = (TPrint)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tscNode4 = (TSc)nodeArrayList3.get(0);

        pinstNode1 = new APrintExpInst(tprintNode2, pexpNode3, tscNode4);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce APrintlnInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TPrintln tprintlnNode2;
        TSc tscNode3;
        tprintlnNode2 = (TPrintln)nodeArrayList1.get(0);
        tscNode3 = (TSc)nodeArrayList2.get(0);

        pinstNode1 = new APrintlnInst(tprintlnNode2, tscNode3);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AEqExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TEq teqNode3;
        PAdditiveExp padditiveexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        teqNode3 = (TEq)nodeArrayList2.get(0);
        padditiveexpNode4 = (PAdditiveExp)nodeArrayList3.get(0);

        pexpNode1 = new AEqExp(pexpNode2, teqNode3, padditiveexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ALtExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TLt tltNode3;
        PAdditiveExp padditiveexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tltNode3 = (TLt)nodeArrayList2.get(0);
        padditiveexpNode4 = (PAdditiveExp)nodeArrayList3.get(0);

        pexpNode1 = new ALtExp(pexpNode2, tltNode3, padditiveexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ASimpleExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PAdditiveExp padditiveexpNode2;
        padditiveexpNode2 = (PAdditiveExp)nodeArrayList1.get(0);

        pexpNode1 = new ASimpleExp(padditiveexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAddAdditiveExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditiveExp padditiveexpNode1;
        {
            // Block
        PAdditiveExp padditiveexpNode2;
        TPlus tplusNode3;
        PTerm ptermNode4;
        padditiveexpNode2 = (PAdditiveExp)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        padditiveexpNode1 = new AAddAdditiveExp(padditiveexpNode2, tplusNode3, ptermNode4);
        }
	nodeList.add(padditiveexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ASubAdditiveExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditiveExp padditiveexpNode1;
        {
            // Block
        PAdditiveExp padditiveexpNode2;
        TMinus tminusNode3;
        PTerm ptermNode4;
        padditiveexpNode2 = (PAdditiveExp)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        padditiveexpNode1 = new ASubAdditiveExp(padditiveexpNode2, tminusNode3, ptermNode4);
        }
	nodeList.add(padditiveexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ASimpleAdditiveExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditiveExp padditiveexpNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        padditiveexpNode1 = new ASimpleAdditiveExp(ptermNode2);
        }
	nodeList.add(padditiveexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ATrueTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        ptermNode1 = new ATrueTerm(ttrueNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AFalseTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        ptermNode1 = new AFalseTerm(tfalseNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ANumberTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        ptermNode1 = new ANumberTerm(tnumberNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AStringTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptermNode1 = new AStringTerm(tstringNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AVarTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TIdent tidentNode2;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);

        ptermNode1 = new AVarTerm(tidentNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ATerminal$Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PInst pinstNode1;
        pinstNode1 = (PInst)nodeArrayList1.get(0);
	if(pinstNode1 != null)
	{
	  listNode2.add(pinstNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ANonTerminal$Inst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PInst pinstNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pinstNode2 = (PInst)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pinstNode2 != null)
	{
	  listNode3.add(pinstNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 3}, {7, SHIFT, 4}, {8, SHIFT, 5}, {10, SHIFT, 6}, {17, SHIFT, 7}, },
			{{-1, ERROR, 1}, {2, SHIFT, 11}, {3, SHIFT, 12}, {17, SHIFT, 13}, {18, SHIFT, 14}, {19, SHIFT, 15}, },
			{{-1, ERROR, 2}, {11, SHIFT, 19}, },
			{{-1, ERROR, 3}, {2, SHIFT, 11}, {3, SHIFT, 12}, {17, SHIFT, 13}, {18, SHIFT, 14}, {19, SHIFT, 15}, },
			{{-1, ERROR, 4}, {2, SHIFT, 11}, {3, SHIFT, 12}, {17, SHIFT, 13}, {18, SHIFT, 14}, {19, SHIFT, 15}, },
			{{-1, ERROR, 5}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 3}, {7, SHIFT, 4}, {8, SHIFT, 5}, {9, SHIFT, 22}, {10, SHIFT, 6}, {17, SHIFT, 7}, },
			{{-1, ERROR, 6}, {17, SHIFT, 24}, },
			{{-1, ERROR, 7}, {12, SHIFT, 25}, },
			{{-1, ERROR, 8}, {20, ACCEPT, -1}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 3}, {7, SHIFT, 4}, {8, SHIFT, 5}, {10, SHIFT, 6}, {17, SHIFT, 7}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 16}, {11, SHIFT, 27}, {15, SHIFT, 28}, {16, SHIFT, 29}, },
			{{-1, REDUCE, 12}, {13, SHIFT, 30}, {14, SHIFT, 31}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 20}, {5, SHIFT, 32}, {15, SHIFT, 28}, {16, SHIFT, 29}, },
			{{-1, ERROR, 21}, {8, SHIFT, 33}, {15, SHIFT, 28}, {16, SHIFT, 29}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 23}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 3}, {7, SHIFT, 4}, {8, SHIFT, 5}, {9, SHIFT, 34}, {10, SHIFT, 6}, {17, SHIFT, 7}, },
			{{-1, ERROR, 24}, {12, SHIFT, 35}, },
			{{-1, ERROR, 25}, {2, SHIFT, 11}, {3, SHIFT, 12}, {17, SHIFT, 13}, {18, SHIFT, 14}, {19, SHIFT, 15}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 28}, {2, SHIFT, 11}, {3, SHIFT, 12}, {17, SHIFT, 13}, {18, SHIFT, 14}, {19, SHIFT, 15}, },
			{{-1, ERROR, 29}, {2, SHIFT, 11}, {3, SHIFT, 12}, {17, SHIFT, 13}, {18, SHIFT, 14}, {19, SHIFT, 15}, },
			{{-1, ERROR, 30}, {2, SHIFT, 11}, {3, SHIFT, 12}, {17, SHIFT, 13}, {18, SHIFT, 14}, {19, SHIFT, 15}, },
			{{-1, ERROR, 31}, {2, SHIFT, 11}, {3, SHIFT, 12}, {17, SHIFT, 13}, {18, SHIFT, 14}, {19, SHIFT, 15}, },
			{{-1, ERROR, 32}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 3}, {7, SHIFT, 4}, {8, SHIFT, 5}, {10, SHIFT, 6}, {17, SHIFT, 7}, },
			{{-1, ERROR, 33}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 3}, {7, SHIFT, 4}, {8, SHIFT, 5}, {10, SHIFT, 6}, {17, SHIFT, 7}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 35}, {2, SHIFT, 11}, {3, SHIFT, 12}, {17, SHIFT, 13}, {18, SHIFT, 14}, {19, SHIFT, 15}, },
			{{-1, ERROR, 36}, {11, SHIFT, 44}, {15, SHIFT, 28}, {16, SHIFT, 29}, },
			{{-1, REDUCE, 11}, {13, SHIFT, 30}, {14, SHIFT, 31}, },
			{{-1, REDUCE, 10}, {13, SHIFT, 30}, {14, SHIFT, 31}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 41}, {6, SHIFT, 45}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 43}, {11, SHIFT, 46}, {15, SHIFT, 28}, {16, SHIFT, 29}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 45}, {0, SHIFT, 1}, {1, SHIFT, 2}, {4, SHIFT, 3}, {7, SHIFT, 4}, {8, SHIFT, 5}, {10, SHIFT, 6}, {17, SHIFT, 7}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 4}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 8}, },
			{{-1, 9}, {10, 26}, {23, 26}, {32, 41}, {33, 42}, {45, 47}, },
			{{-1, 16}, {3, 20}, {4, 21}, {25, 36}, {35, 43}, },
			{{-1, 17}, {28, 37}, {29, 38}, },
			{{-1, 18}, {30, 39}, {31, 40}, },
			{{-1, 10}, {5, 23}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'print', 'println', 'if', 'while', 'do', 'var', ident, EOF",
			"expecting: 'true', 'false', ident, string, number",
			"expecting: ';'",
			"expecting: 'print', 'println', 'if', 'while', 'do', 'end', 'var', ident",
			"expecting: ident",
			"expecting: '='",
			"expecting: EOF",
			"expecting: 'print', 'println', 'if', 'while', 'do', 'end', 'var', ident, EOF",
			"expecting: 'then', 'do', ';', '+', '-', '<', '=='",
			"expecting: ';', '<', '=='",
			"expecting: 'print', 'println', 'if', 'else', 'while', 'do', 'end', 'var', ident, EOF",
			"expecting: 'then', '<', '=='",
			"expecting: 'do', '<', '=='",
			"expecting: 'print', 'println', 'if', 'while', 'do', 'var', ident",
			"expecting: 'else'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 1, 1, 3, 4, 5, 6, 7, 0, 8, 8, 8, 8, 8, 9, 8, 8, 10, 11, 12, 10, 3, 5, 1, 7, 10, 1, 1, 1, 1, 13, 13, 10, 1, 9, 8, 8, 8, 8, 14, 10, 9, 10, 13, 10, 10, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
